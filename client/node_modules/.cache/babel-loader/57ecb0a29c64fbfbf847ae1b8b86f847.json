{"ast":null,"code":"import { tmdbQueryApi, tmdbApiPopular, tmdbIdApi, tmdbNewestTodayApi, tmdbMovieSliderApi, tmdbHighestRatedApi, tmdbTrailersApi, tmdbActorsApi, tmdbMovieCreditsApi, tmdbGenresApi, tmdbAdvancedMoviesApi, tmdbCastId, tmdbCastInfoApi, tmdbCastMoviesApi, tmdbMovieReviewsApi } from \"../../apis/tmdbApi\";\nimport omdbApi from \"../../apis/omdbApi\";\nimport torrentApi from \"../../apis/torrentApi\";\nimport subtitlesApi from \"../../apis/subtitlesApi\";\nimport { fetchComedianActors } from \"../../scraper/imdb\";\nimport magnet from \"../../apis/magnet\";\nimport * as Vibrant from \"node-vibrant\";\nexport const displayPage = page => {\n  return {\n    type: \"DISPLAY_PAGE\",\n    payload: page\n  };\n};\nexport const selectedMovie = movie => {\n  return {\n    type: \"MOVIE_SELECTED\",\n    payload: movie\n  };\n};\nexport const selectedMovieId = id => {\n  return {\n    type: \"MOVIE_ID_SELECTED\",\n    payload: id\n  };\n};\nexport const selectedMovies = movies => {\n  return {\n    type: \"MOVIES_SELECTED\",\n    payload: movies\n  };\n};\nexport const movieSuggestions = movies => {\n  return {\n    type: \"MOVIE_SUGGESTIONS\",\n    payload: movies\n  };\n};\nexport const fetchMovies = page => async (dispatch, getState) => {\n  const state = getState();\n\n  if (state.search.length > 0) {\n    const response = await tmdbQueryApi(page, state.search);\n    dispatch({\n      type: \"FETCH_MOVIES\",\n      payload: response\n    });\n  }\n};\nexport const fetchNewestMovies = page => async (dispatch, getState) => {\n  const response = await tmdbNewestTodayApi(page);\n  dispatch({\n    type: \"FETCH_NEWEST_MOVIES\",\n    payload: response\n  });\n};\nexport const search = query => {\n  return {\n    type: \"SEARCH_QUERY\",\n    payload: query\n  };\n};\nexport const fetchMovieSlider = () => async dispatch => {\n  const data = await tmdbMovieSliderApi();\n  const popularMoviesData = await Promise.all(data.map(movie => tmdbIdApi(movie.id)));\n  dispatch({\n    type: \"FETCH_MOVIE_SLIDER\",\n    payload: popularMoviesData\n  });\n};\nexport const fetchHighestRatedMovies = page => async dispatch => {\n  const data = await tmdbHighestRatedApi(page);\n  dispatch({\n    type: \"FETCH_HIGHEST_RATED_MOVIES\",\n    payload: data\n  });\n};\nexport const goToMovie = id => (dispatch, getState) => {\n  dispatch(selectedMovieId(id));\n  return dispatch(fetchMovie);\n};\n\nconst fetchMovie = async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n  const omdbData = await omdbApi(tmdbData.imdb_id);\n  const torrentData = await torrentApi(tmdbData.imdb_id);\n  const movieCredits = await tmdbMovieCreditsApi(id);\n  const reviews = await tmdbMovieReviewsApi(id); // export const fetchMovieSlider = () => async dispatch => {\n  //   const data = await tmdbMovieSliderApi();\n  //   const popularMoviesData = await Promise.all(\n  //     data.map(movie => tmdbIdApi(movie.id))\n  //   );\n  // const actorsList = async () => {\n  //   const actors = omdbData.Actors.trim().split(\",\");\n  //   const fetchActors = await Promise.all(\n  //     actors.map(async (actor) => await tmdbActorsApi(actor))\n  //   );\n  //   const x = fetchActors.map((page) => {\n  //     return page.results.slice(0, 1).map((actor) => {\n  //       return {\n  //         name: actor.name,\n  //         profile: actor.profile_path,\n  //       };\n  //     });\n  //   });\n  //   return x;\n  // };\n\n  const imageTarget = () => {\n    return tmdbData.backdrop_path ? `http://image.tmdb.org/t/p/w185//${tmdbData.backdrop_path}` : \"https://upload.wikimedia.org/wikipedia/commons/c/c0/White_color_Page.jpg\";\n  };\n\n  const result = Vibrant.from(imageTarget());\n  const palette = await result.getPalette();\n  const vibrant = await palette.Vibrant.hex;\n  const darkVibrant = await palette.DarkVibrant.hex;\n  const lightVibrant = await palette.LightVibrant.hex;\n  const muted = await palette.Muted.hex;\n  const darkMuted = await palette.DarkMuted.hex;\n  const lightMuted = await palette.LightMuted.hex;\n  let torrents;\n  let magnets;\n\n  if (!torrentData) {\n    torrents = [];\n    magnets = [];\n  } else {\n    torrents = torrentData.map(torrent => {\n      const obj = {\n        url: torrent.url,\n        quality: torrent.quality,\n        type: torrent.type,\n        seeds: torrent.seeds,\n        peers: torrent.peers,\n        size: torrent.size\n      };\n      return obj;\n    });\n    magnets = torrentData.map(torrent => {\n      return magnet(omdbData.Title, torrent.hash, torrent.url);\n    });\n  } // Jumanji: The Next Level\n  // jumanji_the_next_level\n\n\n  const ratings = () => {\n    switch (omdbData.Ratings.length) {\n      case 1:\n        return [{\n          imdb: omdbData.Ratings[0],\n          img: \"https://i.ibb.co/dth8xgq/imdb.png\",\n          url: `https://www.imdb.com/title/${tmdbData.imdb_id}/`\n        }];\n\n      case 2:\n        return [{\n          rating: omdbData.Ratings[0],\n          img: \"https://i.ibb.co/dth8xgq/imdb.png\",\n          url: `https://www.imdb.com/title/${tmdbData.imdb_id}/`\n        }, {\n          rating: omdbData.Ratings[1],\n          img: \"https://i.ibb.co/BCy3STv/tomato.png\"\n        }];\n\n      case 3:\n        return [{\n          rating: omdbData.Ratings[0],\n          img: \"https://i.ibb.co/dth8xgq/imdb.png\",\n          url: `https://www.imdb.com/title/${tmdbData.imdb_id}/`\n        }, {\n          rating: omdbData.Ratings[1],\n          img: \"https://i.ibb.co/BCy3STv/tomato.png\"\n        }, {\n          rating: omdbData.Ratings[2],\n          img: \"https://i.ibb.co/5jVT2rK/meta-critic.png\"\n        }];\n    }\n  };\n\n  const item = {\n    title: omdbData.Title,\n    year: omdbData.Year,\n    tmdbRating: tmdbData.vote_average,\n    ratings: ratings(),\n    genre: omdbData.Genre,\n    director: omdbData.Director,\n    writer: omdbData.Writer,\n    // actors: await actorsList(),\n    cast: movieCredits.cast,\n    runTime: tmdbData.runtime,\n    reviews: reviews,\n    magnets: magnets,\n    plot: tmdbData.overview,\n    tagLine: tmdbData.tagline,\n    language: omdbData.Language,\n    poster: tmdbData.poster_path,\n    backdrop: tmdbData.backdrop_path,\n    colors: {\n      vibrant: vibrant,\n      darkVibrant: darkVibrant,\n      lightVibrant: lightVibrant,\n      muted: muted,\n      darkMuted: darkMuted,\n      lightMuted: lightMuted\n    }\n  }; // ACTION2: FETCH_MOVIE ===> movie ==> state.movie = movie\n\n  dispatch({\n    type: \"DISPLAY_MOVIE\",\n    payload: item\n  });\n};\n\nexport const fetchTrailers = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const trailers = await tmdbTrailersApi(id);\n  dispatch({\n    type: \"FETCH_TRAILERS\",\n    payload: trailers\n  });\n};\nexport const fetchTorrents = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n  const torrents = await torrentApi(tmdbData.imdb_id);\n  dispatch({\n    type: \"FETCH_TORRENTS\",\n    payload: torrents\n  });\n};\nexport const fetchSubtitles = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n  const subtitle = await subtitlesApi(tmdbData.imdb_id);\n  dispatch({\n    type: \"FETCH_SUBTITLES\",\n    payload: subtitle\n  });\n};\nexport const fetchMagnets = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n  const torrentData = await torrentApi(tmdbData.imdb_id);\n  const magnets = torrentData.map(torrent => {\n    return magnet(tmdbData.Title, torrent.hash, torrent.url);\n  });\n  dispatch({\n    type: \"FETCH_MAGNETS\",\n    payload: magnets\n  });\n};\nexport const fetchGenres = () => async dispatch => {\n  const genres = await tmdbGenresApi();\n  dispatch({\n    type: \"FETCH_GENRES\",\n    payload: genres\n  });\n};\nexport const optionActive = e => {\n  return {\n    type: \"OPTION_ACTIVE\",\n    payload: parseInt(e.target.getAttribute(\"data-type\"))\n  };\n};\nexport const createAdvancedSearch = obj => {\n  return {\n    type: \"CREATE_ADVANCED_SEARCH\",\n    payload: obj\n  };\n};\nexport const fetchAdvancedSearch = page => async (dispatch, getState) => {\n  const search = getState().advancedSearch;\n  const savedSearch = getState().displayUserAdvancedSearch;\n  let actorsArray = [];\n  let directorsArray = [];\n  let writersArray = [];\n\n  const fetchCastIds = async (castType, arrayType) => {\n    const fetch = await Promise.all( //removed values from  castType.values.map\n    castType.values.map(async cast => {\n      const castDetails = await tmdbCastId(cast);\n      return castDetails.results[0].id;\n    }));\n    return arrayType.push({\n      values: fetch,\n      option: castType.option\n    });\n  }; // await fetchCastIds(\n  //   savedSearch ? savedSearch.search.actors[0] : search.actorsArray,\n  //   actorsArray\n  // );\n\n\n  await fetchCastIds(savedSearch ? savedSearch.search.actors : search.actorsArray, actorsArray); //\n\n  await fetchCastIds(savedSearch && savedSearch.active ? savedSearch.search.directors : search.directorsArray, directorsArray);\n  await fetchCastIds(savedSearch && savedSearch.active ? savedSearch.search.writers : search.writersArray, writersArray);\n  const obj = {\n    page: page,\n    fromYear: savedSearch ? savedSearch.search.fromYear : search.fromYear,\n    toYear: savedSearch ? savedSearch.search.toYear : search.toYear,\n    sortBy: savedSearch ? savedSearch.search.sortBy : search.sortBy,\n    rating: savedSearch ? savedSearch.search.rating : search.rating,\n    votes: savedSearch ? savedSearch.search.voteCount : search.voteCount,\n    genres: savedSearch ? savedSearch.search.genres : search.genres,\n    runTime: savedSearch ? savedSearch.search.runTime : search.runTime,\n    actors: actorsArray[0],\n    directors: directorsArray[0],\n    writers: writersArray[0],\n    actorsOption: actorsArray\n  };\n  const movies = await tmdbAdvancedMoviesApi(obj);\n  dispatch({\n    type: \"FETCH_ADVANCED_MOVIES\",\n    payload: movies\n  });\n};\nexport const fetchCastSuggestion = (type, query, searchBar) => async dispatch => {\n  let fetchIds;\n  let ids;\n  let idsType;\n\n  if (query.length > 0 && !searchBar) {\n    console.log(\"yup\");\n    fetchIds = await tmdbCastId(query);\n    ids = fetchIds.results;\n  }\n\n  if (query.length > 3 && searchBar) {\n    fetchIds = await tmdbCastId(query);\n    ids = fetchIds.results;\n  }\n\n  if (ids) {\n    if (!searchBar) {\n      idsType = ids.filter(cast => {\n        return type === cast.known_for_department;\n      });\n    } else if (searchBar) {\n      idsType = ids.filter(cast => {\n        return \"Acting\" === cast.known_for_department || \"Directing\" === cast.known_for_department;\n      });\n    }\n\n    const castSuggestions = await Promise.all(idsType.map(cast => tmdbCastInfoApi(cast.id)));\n    dispatch({\n      type: \"FETCH_CAST_SUGGESTIONS\",\n      payload: castSuggestions\n    });\n  } else {\n    dispatch({\n      type: \"FETCH_CAST_SUGGESTIONS\",\n      payload: query\n    });\n  }\n};\nexport const saveUserAdvancedSearch = obj => dispatch => {\n  dispatch({\n    type: \"SAVE_ADVANCED_SEARCH\",\n    payload: obj\n  });\n};\nexport const removeUserAdvancedSearch = obj => {\n  return {\n    type: \"REMOVE_ADVANCED_SEARCH\",\n    payload: obj\n  };\n};\nexport const displayUserSearch = search => {\n  return {\n    type: \"DISPLAY_SAVED_SEARCH\",\n    payload: search\n  };\n};\nexport const defaultSearches = () => async dispatch => {\n  const comedyActors = await fetchComedianActors();\n  const defaultSearches = [{\n    search: {\n      name: \"Hilarious Comedies\",\n      fromYear: \"1985\",\n      toYear: \"\",\n      sortBy: \"vote-average\",\n      rating: 5,\n      voteCount: 100,\n      runTime: 90,\n      genres: \"35\",\n      actors: {\n        option: \"or\",\n        values: comedyActors\n      },\n      directors: {\n        option: \"or\",\n        values: []\n      },\n      writers: {\n        option: \"or\",\n        values: []\n      }\n    }\n  }, {\n    search: {\n      name: \"Action Movies\",\n      fromYear: \"2019\",\n      toYear: \"2019\",\n      rating: 1,\n      voteCount: 15000,\n      runTime: 60,\n      genres: \"Action\",\n      actors: {\n        option: \"or\",\n        values: [\"yo\", \"hi\"]\n      },\n      directors: {\n        option: \"or\",\n        values: []\n      },\n      writers: {\n        option: \"or\",\n        values: []\n      }\n    }\n  }, {\n    search: {\n      name: \"Rare Movies\",\n      fromYear: \"2019\",\n      toYear: \"2019\",\n      rating: 7,\n      voteCount: 15000,\n      runTime: 90,\n      genres: \"Horror\",\n      actors: {\n        option: \"or\",\n        values: [\"yo\", \"hi\"]\n      },\n      directors: {\n        option: \"or\",\n        values: []\n      },\n      writers: {\n        option: \"or\",\n        values: []\n      }\n    }\n  }];\n  return dispatch({\n    type: \"DEFAULT_ADVANCED_SEARCH\",\n    payload: defaultSearches\n  });\n};\nexport const fetchActorMovies = (name, page) => async dispatch => {\n  if (name.length < 0) {\n    return;\n  }\n\n  const fetchId = await tmdbCastId(name);\n  const id = fetchId.results[0].id;\n  const movies = await tmdbCastMoviesApi(id, page);\n  dispatch({\n    type: \"FETCH_ACTOR_MOVIES\",\n    payload: movies\n  });\n};\nexport const createPopularActors = actors => {\n  return {\n    type: \"CREATE_POPULAR_ACTORS\",\n    payload: actors\n  };\n};\nexport const fetchPopularActors = page => async (dispatch, getState) => {\n  const actorsObj = getState().createPopularActors;\n  const actors = {};\n  actors.total_results = actorsObj.total_results;\n  actors.total_pages = actorsObj.total_pages;\n  actors.results = [];\n  await Promise.all(actorsObj[page].map(async cast => {\n    const actorDetails = await tmdbCastId(cast);\n    actors.results.push(actorDetails.results[0]);\n  }));\n  dispatch({\n    type: \"FETCH_POPULAR_ACTORS\",\n    payload: actors\n  });\n};\nexport const isFetching = bool => {\n  return {\n    type: \"IS_FETCHING\",\n    payload: bool\n  };\n};\nexport const displayTheme = theme => {\n  return {\n    type: \"DISPLAY_THEME\",\n    payload: theme\n  };\n};\nexport const displaySpinner = spinner => {\n  return {\n    type: \"DISPLAY_SPINNER\",\n    payload: spinner\n  };\n};\nexport const isSecretSequence = bool => {\n  return {\n    type: \"SECRET_SEQUENCE\",\n    payload: bool\n  };\n};\nexport const showSearchResults = type => {\n  return {\n    type: \"SHOW_SEARCH_RESULTS\",\n    payload: type\n  };\n};\nexport const currentPage = page => {\n  return {\n    type: \"CURRENT_PAGE\",\n    payload: page\n  };\n};","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/src/redux/actions/index.js"],"names":["tmdbQueryApi","tmdbApiPopular","tmdbIdApi","tmdbNewestTodayApi","tmdbMovieSliderApi","tmdbHighestRatedApi","tmdbTrailersApi","tmdbActorsApi","tmdbMovieCreditsApi","tmdbGenresApi","tmdbAdvancedMoviesApi","tmdbCastId","tmdbCastInfoApi","tmdbCastMoviesApi","tmdbMovieReviewsApi","omdbApi","torrentApi","subtitlesApi","fetchComedianActors","magnet","Vibrant","displayPage","page","type","payload","selectedMovie","movie","selectedMovieId","id","selectedMovies","movies","movieSuggestions","fetchMovies","dispatch","getState","state","search","length","response","fetchNewestMovies","query","fetchMovieSlider","data","popularMoviesData","Promise","all","map","fetchHighestRatedMovies","goToMovie","fetchMovie","tmdbData","omdbData","imdb_id","torrentData","movieCredits","reviews","imageTarget","backdrop_path","result","from","palette","getPalette","vibrant","hex","darkVibrant","DarkVibrant","lightVibrant","LightVibrant","muted","Muted","darkMuted","DarkMuted","lightMuted","LightMuted","torrents","magnets","torrent","obj","url","quality","seeds","peers","size","Title","hash","ratings","Ratings","imdb","img","rating","item","title","year","Year","tmdbRating","vote_average","genre","Genre","director","Director","writer","Writer","cast","runTime","runtime","plot","overview","tagLine","tagline","language","Language","poster","poster_path","backdrop","colors","fetchTrailers","trailers","fetchTorrents","fetchSubtitles","subtitle","fetchMagnets","fetchGenres","genres","optionActive","e","parseInt","target","getAttribute","createAdvancedSearch","fetchAdvancedSearch","advancedSearch","savedSearch","displayUserAdvancedSearch","actorsArray","directorsArray","writersArray","fetchCastIds","castType","arrayType","fetch","values","castDetails","results","push","option","actors","active","directors","writers","fromYear","toYear","sortBy","votes","voteCount","actorsOption","fetchCastSuggestion","searchBar","fetchIds","ids","idsType","console","log","filter","known_for_department","castSuggestions","saveUserAdvancedSearch","removeUserAdvancedSearch","displayUserSearch","defaultSearches","comedyActors","name","fetchActorMovies","fetchId","createPopularActors","fetchPopularActors","actorsObj","total_results","total_pages","actorDetails","isFetching","bool","displayTheme","theme","displaySpinner","spinner","isSecretSequence","showSearchResults","currentPage"],"mappings":"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","sourcesContent":["import {\n  tmdbQueryApi,\n  tmdbApiPopular,\n  tmdbIdApi,\n  tmdbNewestTodayApi,\n  tmdbMovieSliderApi,\n  tmdbHighestRatedApi,\n  tmdbTrailersApi,\n  tmdbActorsApi,\n  tmdbMovieCreditsApi,\n  tmdbGenresApi,\n  tmdbAdvancedMoviesApi,\n  tmdbCastId,\n  tmdbCastInfoApi,\n  tmdbCastMoviesApi,\n  tmdbMovieReviewsApi,\n} from \"../../apis/tmdbApi\";\nimport omdbApi from \"../../apis/omdbApi\";\nimport torrentApi from \"../../apis/torrentApi\";\nimport subtitlesApi from \"../../apis/subtitlesApi\";\nimport { fetchComedianActors } from \"../../scraper/imdb\";\nimport magnet from \"../../apis/magnet\";\nimport * as Vibrant from \"node-vibrant\";\n\nexport const displayPage = (page) => {\n  return {\n    type: \"DISPLAY_PAGE\",\n    payload: page,\n  };\n};\n\nexport const selectedMovie = (movie) => {\n  return {\n    type: \"MOVIE_SELECTED\",\n    payload: movie,\n  };\n};\nexport const selectedMovieId = (id) => {\n  return {\n    type: \"MOVIE_ID_SELECTED\",\n    payload: id,\n  };\n};\nexport const selectedMovies = (movies) => {\n  return {\n    type: \"MOVIES_SELECTED\",\n    payload: movies,\n  };\n};\nexport const movieSuggestions = (movies) => {\n  return {\n    type: \"MOVIE_SUGGESTIONS\",\n    payload: movies,\n  };\n};\nexport const fetchMovies = (page) => async (dispatch, getState) => {\n  const state = getState();\n  if (state.search.length > 0) {\n    const response = await tmdbQueryApi(page, state.search);\n\n    dispatch({ type: \"FETCH_MOVIES\", payload: response });\n  }\n};\n\nexport const fetchNewestMovies = (page) => async (dispatch, getState) => {\n  const response = await tmdbNewestTodayApi(page);\n\n  dispatch({ type: \"FETCH_NEWEST_MOVIES\", payload: response });\n};\n\nexport const search = (query) => {\n  return {\n    type: \"SEARCH_QUERY\",\n    payload: query,\n  };\n};\n\nexport const fetchMovieSlider = () => async (dispatch) => {\n  const data = await tmdbMovieSliderApi();\n  const popularMoviesData = await Promise.all(\n    data.map((movie) => tmdbIdApi(movie.id))\n  );\n\n  dispatch({ type: \"FETCH_MOVIE_SLIDER\", payload: popularMoviesData });\n};\n\nexport const fetchHighestRatedMovies = (page) => async (dispatch) => {\n  const data = await tmdbHighestRatedApi(page);\n\n  dispatch({ type: \"FETCH_HIGHEST_RATED_MOVIES\", payload: data });\n};\n\nexport const goToMovie = (id) => (dispatch, getState) => {\n  dispatch(selectedMovieId(id));\n  return dispatch(fetchMovie);\n};\n\nconst fetchMovie = async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n\n  const omdbData = await omdbApi(tmdbData.imdb_id);\n  const torrentData = await torrentApi(tmdbData.imdb_id);\n  const movieCredits = await tmdbMovieCreditsApi(id);\n\n  const reviews = await tmdbMovieReviewsApi(id);\n\n  // export const fetchMovieSlider = () => async dispatch => {\n  //   const data = await tmdbMovieSliderApi();\n  //   const popularMoviesData = await Promise.all(\n  //     data.map(movie => tmdbIdApi(movie.id))\n  //   );\n\n  // const actorsList = async () => {\n  //   const actors = omdbData.Actors.trim().split(\",\");\n  //   const fetchActors = await Promise.all(\n  //     actors.map(async (actor) => await tmdbActorsApi(actor))\n  //   );\n\n  //   const x = fetchActors.map((page) => {\n  //     return page.results.slice(0, 1).map((actor) => {\n  //       return {\n  //         name: actor.name,\n  //         profile: actor.profile_path,\n  //       };\n  //     });\n  //   });\n  //   return x;\n  // };\n\n  const imageTarget = () => {\n    return tmdbData.backdrop_path\n      ? `http://image.tmdb.org/t/p/w185//${tmdbData.backdrop_path}`\n      : \"https://upload.wikimedia.org/wikipedia/commons/c/c0/White_color_Page.jpg\";\n  };\n  const result = Vibrant.from(imageTarget());\n  const palette = await result.getPalette();\n  const vibrant = await palette.Vibrant.hex;\n  const darkVibrant = await palette.DarkVibrant.hex;\n  const lightVibrant = await palette.LightVibrant.hex;\n  const muted = await palette.Muted.hex;\n  const darkMuted = await palette.DarkMuted.hex;\n  const lightMuted = await palette.LightMuted.hex;\n\n  let torrents;\n  let magnets;\n  if (!torrentData) {\n    torrents = [];\n    magnets = [];\n  } else {\n    torrents = torrentData.map((torrent) => {\n      const obj = {\n        url: torrent.url,\n        quality: torrent.quality,\n        type: torrent.type,\n        seeds: torrent.seeds,\n        peers: torrent.peers,\n        size: torrent.size,\n      };\n      return obj;\n    });\n    magnets = torrentData.map((torrent) => {\n      return magnet(omdbData.Title, torrent.hash, torrent.url);\n    });\n  }\n\n  // Jumanji: The Next Level\n  // jumanji_the_next_level\n\n  const ratings = () => {\n    switch (omdbData.Ratings.length) {\n      case 1:\n        return [\n          {\n            imdb: omdbData.Ratings[0],\n            img: \"https://i.ibb.co/dth8xgq/imdb.png\",\n            url: `https://www.imdb.com/title/${tmdbData.imdb_id}/`,\n          },\n        ];\n\n      case 2:\n        return [\n          {\n            rating: omdbData.Ratings[0],\n            img: \"https://i.ibb.co/dth8xgq/imdb.png\",\n            url: `https://www.imdb.com/title/${tmdbData.imdb_id}/`,\n          },\n          {\n            rating: omdbData.Ratings[1],\n            img: \"https://i.ibb.co/BCy3STv/tomato.png\",\n          },\n        ];\n      case 3:\n        return [\n          {\n            rating: omdbData.Ratings[0],\n            img: \"https://i.ibb.co/dth8xgq/imdb.png\",\n            url: `https://www.imdb.com/title/${tmdbData.imdb_id}/`,\n          },\n          {\n            rating: omdbData.Ratings[1],\n            img: \"https://i.ibb.co/BCy3STv/tomato.png\",\n          },\n          {\n            rating: omdbData.Ratings[2],\n            img: \"https://i.ibb.co/5jVT2rK/meta-critic.png\",\n          },\n        ];\n    }\n  };\n\n  const item = {\n    title: omdbData.Title,\n    year: omdbData.Year,\n    tmdbRating: tmdbData.vote_average,\n    ratings: ratings(),\n    genre: omdbData.Genre,\n    director: omdbData.Director,\n    writer: omdbData.Writer,\n    // actors: await actorsList(),\n    cast: movieCredits.cast,\n    runTime: tmdbData.runtime,\n    reviews: reviews,\n    magnets: magnets,\n    plot: tmdbData.overview,\n    tagLine: tmdbData.tagline,\n    language: omdbData.Language,\n    poster: tmdbData.poster_path,\n    backdrop: tmdbData.backdrop_path,\n    colors: {\n      vibrant: vibrant,\n      darkVibrant: darkVibrant,\n      lightVibrant: lightVibrant,\n      muted: muted,\n      darkMuted: darkMuted,\n      lightMuted: lightMuted,\n    },\n  };\n\n  // ACTION2: FETCH_MOVIE ===> movie ==> state.movie = movie\n  dispatch({ type: \"DISPLAY_MOVIE\", payload: item });\n};\n\nexport const fetchTrailers = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const trailers = await tmdbTrailersApi(id);\n\n  dispatch({ type: \"FETCH_TRAILERS\", payload: trailers });\n};\n\nexport const fetchTorrents = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n  const torrents = await torrentApi(tmdbData.imdb_id);\n\n  dispatch({ type: \"FETCH_TORRENTS\", payload: torrents });\n};\n\nexport const fetchSubtitles = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n  const subtitle = await subtitlesApi(tmdbData.imdb_id);\n\n  dispatch({ type: \"FETCH_SUBTITLES\", payload: subtitle });\n};\n\nexport const fetchMagnets = () => async (dispatch, getState) => {\n  const id = getState().selectedMovieId;\n  const tmdbData = await tmdbIdApi(id);\n\n  const torrentData = await torrentApi(tmdbData.imdb_id);\n\n  const magnets = torrentData.map((torrent) => {\n    return magnet(tmdbData.Title, torrent.hash, torrent.url);\n  });\n\n  dispatch({ type: \"FETCH_MAGNETS\", payload: magnets });\n};\n\nexport const fetchGenres = () => async (dispatch) => {\n  const genres = await tmdbGenresApi();\n\n  dispatch({ type: \"FETCH_GENRES\", payload: genres });\n};\n\nexport const optionActive = (e) => {\n  return {\n    type: \"OPTION_ACTIVE\",\n    payload: parseInt(e.target.getAttribute(\"data-type\")),\n  };\n};\n\nexport const createAdvancedSearch = (obj) => {\n  return {\n    type: \"CREATE_ADVANCED_SEARCH\",\n    payload: obj,\n  };\n};\n\nexport const fetchAdvancedSearch = (page) => async (dispatch, getState) => {\n  const search = getState().advancedSearch;\n\n  const savedSearch = getState().displayUserAdvancedSearch;\n\n  let actorsArray = [];\n  let directorsArray = [];\n  let writersArray = [];\n  const fetchCastIds = async (castType, arrayType) => {\n    const fetch = await Promise.all(\n      //removed values from  castType.values.map\n      castType.values.map(async (cast) => {\n        const castDetails = await tmdbCastId(cast);\n\n        return castDetails.results[0].id;\n      })\n    );\n\n    return arrayType.push({ values: fetch, option: castType.option });\n  };\n\n  // await fetchCastIds(\n  //   savedSearch ? savedSearch.search.actors[0] : search.actorsArray,\n  //   actorsArray\n  // );\n\n  await fetchCastIds(\n    savedSearch ? savedSearch.search.actors : search.actorsArray,\n    actorsArray\n  );\n\n  //\n  await fetchCastIds(\n    savedSearch && savedSearch.active\n      ? savedSearch.search.directors\n      : search.directorsArray,\n    directorsArray\n  );\n\n  await fetchCastIds(\n    savedSearch && savedSearch.active\n      ? savedSearch.search.writers\n      : search.writersArray,\n    writersArray\n  );\n\n  const obj = {\n    page: page,\n    fromYear: savedSearch ? savedSearch.search.fromYear : search.fromYear,\n    toYear: savedSearch ? savedSearch.search.toYear : search.toYear,\n    sortBy: savedSearch ? savedSearch.search.sortBy : search.sortBy,\n    rating: savedSearch ? savedSearch.search.rating : search.rating,\n    votes: savedSearch ? savedSearch.search.voteCount : search.voteCount,\n    genres: savedSearch ? savedSearch.search.genres : search.genres,\n    runTime: savedSearch ? savedSearch.search.runTime : search.runTime,\n    actors: actorsArray[0],\n    directors: directorsArray[0],\n    writers: writersArray[0],\n    actorsOption: actorsArray,\n  };\n\n  const movies = await tmdbAdvancedMoviesApi(obj);\n\n  dispatch({ type: \"FETCH_ADVANCED_MOVIES\", payload: movies });\n};\n\nexport const fetchCastSuggestion = (type, query, searchBar) => async (\n  dispatch\n) => {\n  let fetchIds;\n  let ids;\n  let idsType;\n  if (query.length > 0 && !searchBar) {\n    console.log(\"yup\");\n\n    fetchIds = await tmdbCastId(query);\n    ids = fetchIds.results;\n  }\n  if (query.length > 3 && searchBar) {\n    fetchIds = await tmdbCastId(query);\n    ids = fetchIds.results;\n  }\n\n  if (ids) {\n    if (!searchBar) {\n      idsType = ids.filter((cast) => {\n        return type === cast.known_for_department;\n      });\n    } else if (searchBar) {\n      idsType = ids.filter((cast) => {\n        return (\n          \"Acting\" === cast.known_for_department ||\n          \"Directing\" === cast.known_for_department\n        );\n      });\n    }\n\n    const castSuggestions = await Promise.all(\n      idsType.map((cast) => tmdbCastInfoApi(cast.id))\n    );\n\n    dispatch({ type: \"FETCH_CAST_SUGGESTIONS\", payload: castSuggestions });\n  } else {\n    dispatch({ type: \"FETCH_CAST_SUGGESTIONS\", payload: query });\n  }\n};\n\nexport const saveUserAdvancedSearch = (obj) => (dispatch) => {\n  dispatch({ type: \"SAVE_ADVANCED_SEARCH\", payload: obj });\n};\n\nexport const removeUserAdvancedSearch = (obj) => {\n  return {\n    type: \"REMOVE_ADVANCED_SEARCH\",\n    payload: obj,\n  };\n};\n\nexport const displayUserSearch = (search) => {\n  return {\n    type: \"DISPLAY_SAVED_SEARCH\",\n    payload: search,\n  };\n};\n\nexport const defaultSearches = () => async (dispatch) => {\n  const comedyActors = await fetchComedianActors();\n\n  const defaultSearches = [\n    {\n      search: {\n        name: \"Hilarious Comedies\",\n        fromYear: \"1985\",\n        toYear: \"\",\n        sortBy: \"vote-average\",\n        rating: 5,\n        voteCount: 100,\n        runTime: 90,\n        genres: \"35\",\n        actors: { option: \"or\", values: comedyActors },\n        directors: { option: \"or\", values: [] },\n        writers: { option: \"or\", values: [] },\n      },\n    },\n    {\n      search: {\n        name: \"Action Movies\",\n        fromYear: \"2019\",\n        toYear: \"2019\",\n        rating: 1,\n        voteCount: 15000,\n        runTime: 60,\n        genres: \"Action\",\n        actors: { option: \"or\", values: [\"yo\", \"hi\"] },\n        directors: { option: \"or\", values: [] },\n        writers: { option: \"or\", values: [] },\n      },\n    },\n    {\n      search: {\n        name: \"Rare Movies\",\n        fromYear: \"2019\",\n        toYear: \"2019\",\n        rating: 7,\n        voteCount: 15000,\n        runTime: 90,\n        genres: \"Horror\",\n        actors: { option: \"or\", values: [\"yo\", \"hi\"] },\n        directors: { option: \"or\", values: [] },\n        writers: { option: \"or\", values: [] },\n      },\n    },\n  ];\n\n  return dispatch({\n    type: \"DEFAULT_ADVANCED_SEARCH\",\n    payload: defaultSearches,\n  });\n};\n\nexport const fetchActorMovies = (name, page) => async (dispatch) => {\n  if (name.length < 0) {\n    return;\n  }\n  const fetchId = await tmdbCastId(name);\n  const id = fetchId.results[0].id;\n\n  const movies = await tmdbCastMoviesApi(id, page);\n\n  dispatch({ type: \"FETCH_ACTOR_MOVIES\", payload: movies });\n};\n\nexport const createPopularActors = (actors) => {\n  return {\n    type: \"CREATE_POPULAR_ACTORS\",\n    payload: actors,\n  };\n};\nexport const fetchPopularActors = (page) => async (dispatch, getState) => {\n  const actorsObj = getState().createPopularActors;\n  const actors = {};\n  actors.total_results = actorsObj.total_results;\n  actors.total_pages = actorsObj.total_pages;\n  actors.results = [];\n\n  await Promise.all(\n    actorsObj[page].map(async (cast) => {\n      const actorDetails = await tmdbCastId(cast);\n      actors.results.push(actorDetails.results[0]);\n    })\n  );\n\n  dispatch({ type: \"FETCH_POPULAR_ACTORS\", payload: actors });\n};\n\nexport const isFetching = (bool) => {\n  return {\n    type: \"IS_FETCHING\",\n    payload: bool,\n  };\n};\n\nexport const displayTheme = (theme) => {\n  return {\n    type: \"DISPLAY_THEME\",\n    payload: theme,\n  };\n};\n\nexport const displaySpinner = (spinner) => {\n  return {\n    type: \"DISPLAY_SPINNER\",\n    payload: spinner,\n  };\n};\n\nexport const isSecretSequence = (bool) => {\n  return {\n    type: \"SECRET_SEQUENCE\",\n    payload: bool,\n  };\n};\n\nexport const showSearchResults = (type) => {\n  return {\n    type: \"SHOW_SEARCH_RESULTS\",\n    payload: type,\n  };\n};\n\nexport const currentPage = (page) => {\n  return {\n    type: \"CURRENT_PAGE\",\n    payload: page,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}