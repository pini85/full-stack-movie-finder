{"ast":null,"code":"var _jsxFileName = \"/home/pinchas/code/projects/movie-finder/src/components/ShowSubtitles/ShowSubtitles.component.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchSubtitles } from \"../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport { SpinnerContainer } from \"./showSubtitles.styles\";\n\nconst ShowSubtitles = ({\n  fetchSubtitles,\n  subtitles\n}) => {\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchSubtitles();\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [fetchSubtitles]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SpinnerContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faFilm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 22\n    }\n  }) : null), subtitles && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: subtitles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, \" subtitle\")));\n};\n\nconst mapStateToProps = state => ({\n  subtitles: state.fetchSubtitles\n});\n\nexport default connect(mapStateToProps, {\n  fetchSubtitles: fetchSubtitles\n})(ShowSubtitles);","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/src/components/ShowSubtitles/ShowSubtitles.component.jsx"],"names":["React","useEffect","useState","connect","fetchSubtitles","FontAwesomeIcon","faFilm","SpinnerContainer","ShowSubtitles","subtitles","isLoading","setLoading","fetchData","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEJ,EAAAA,cAAF;AAAkBK,EAAAA;AAAlB,CAAD,KAAmC;AACvD,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,YAAY;AAC5B,YAAMR,cAAc,EAApB;AACAO,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHD;;AAIAC,IAAAA,SAAS;AACV,GANQ,EAMN,CAACR,cAAD,CANM,CAAT;AAOA,sBACE,uDACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,SAAS,gBAAG,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEJ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAuC,IADnD,CADF,EAIGG,SAAS,iBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,IAAI,EAAEA,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CALJ,CADF;AAYD,CArBD;;AAsBA,MAAMI,eAAe,GAAIC,KAAD,KAAY;AAClCL,EAAAA,SAAS,EAAEK,KAAK,CAACV;AADiB,CAAZ,CAAxB;;AAGA,eAAeD,OAAO,CAACU,eAAD,EAAkB;AACtCT,EAAAA,cAAc,EAAEA;AADsB,CAAlB,CAAP,CAEZI,aAFY,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchSubtitles } from \"../../redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport { SpinnerContainer } from \"./showSubtitles.styles\";\n\nconst ShowSubtitles = ({ fetchSubtitles, subtitles }) => {\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchSubtitles();\n      setLoading(false);\n    };\n    fetchData();\n  }, [fetchSubtitles]);\n  return (\n    <>\n      <SpinnerContainer>\n        {isLoading ? <FontAwesomeIcon icon={faFilm} /> : null}\n      </SpinnerContainer>\n      {subtitles && (\n        <div>\n          <a href={subtitles}> subtitle</a>\n        </div>\n      )}\n    </>\n  );\n};\nconst mapStateToProps = (state) => ({\n  subtitles: state.fetchSubtitles,\n});\nexport default connect(mapStateToProps, {\n  fetchSubtitles: fetchSubtitles,\n})(ShowSubtitles);\n"]},"metadata":{},"sourceType":"module"}