{"ast":null,"code":"const libhash = require('./hash.js');\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nmodule.exports = new class LibID {\n  readNFO(file) {\n    let p = path.parse(file);\n    let nfo = path.join(p.dir, p.name + '.nfo');\n    let detectedId;\n\n    if (!fs.existsSync(nfo)) {\n      for (let f of fs.readdirSync(p.dir)) {\n        if (f.match(/\\.nfo/i) !== null) {\n          nfo = path.join(p.dir, f);\n          break;\n        }\n      }\n    }\n\n    if (fs.existsSync(nfo)) detectedId = fs.readFileSync(nfo).toString().match(/tt\\d+/i);\n    return detectedId ? detectedId[0] : undefined;\n  }\n\n  parseResponse(response, info) {\n    if (response.data === String() || !response.status.match(/200/)) throw new Error(response.status || 'OpenSubtitles unknown error');\n    let data = Object();\n\n    if (response.data[info.moviehash] && Object.keys(response.data[info.moviehash]).length) {\n      // we got valid info\n      data = {\n        subcount: response.data[info.moviehash].SubCount,\n        added: response.data.accepted_moviehashes ? true : false,\n        metadata: {\n          imdbid: response.data[info.moviehash].MovieImdbID !== '0' ? 'tt' + response.data[info.moviehash].MovieImdbID : undefined,\n          title: response.data[info.moviehash].MovieName,\n          year: response.data[info.moviehash].MovieYear\n        }\n      };\n\n      if (response.data[info.moviehash].SeriesEpisode + response.data[info.moviehash].SeriesSeason !== '00') {\n        data.metadata.episode = response.data[info.moviehash].SeriesEpisode;\n        data.metadata.season = response.data[info.moviehash].SeriesSeason;\n        data.metadata.episode_title = data.metadata.title.split('\"')[2].trim();\n        data.metadata.title = data.metadata.title.split('\"')[1].trim();\n      }\n    } else if (response.data.accepted_moviehashes && response.data.accepted_moviehashes.length) {\n      // we pushed new hash\n      data.added = true;\n    } else {\n      // this was a waste of time\n      data.added = false;\n    }\n\n    data.moviehash = info.moviehash; // inject moviehash\n\n    data.moviebytesize = info.moviebytesize; // inject moviebytesize\n\n    if (info.imdb && !data.metadata) {\n      // inject imdb if possible\n      data.metadata = {\n        imdbid: 'tt' + info.imdb.replace('tt', '')\n      };\n    }\n\n    return data;\n  }\n\n  extend(data, response) {\n    if (response.data !== String() && response.status.match(/200/)) {\n      if (response.data.kind && response.data.kind.match(/episode/i)) {\n        data.type = 'episode';\n      } else if (response.data.kind && response.data.kind.match(/movie/i)) {\n        data.type = 'movie';\n      } else {\n        delete data.metadata;\n        return data; // it is impossible that a single file is an entire show\n      }\n\n      data.metadata.cast = response.data.cast ? response.data.cast : Object();\n      data.metadata.country = response.data.country ? response.data.country : Array();\n      data.metadata.cover = response.data.cover;\n      data.metadata.directors = response.data.directors ? response.data.directors : Object();\n      data.metadata.duration = response.data.duration;\n      data.metadata.genres = response.data.genres ? response.data.genres : Array();\n      data.metadata.rating = response.data.rating;\n      data.metadata.synopsis = response.data.plot && response.data.plot.match(/add a plot/i) !== null ? undefined : response.data.plot;\n      data.metadata.year = response.data.year;\n      data.metadata.trivia = response.data.trivia ? response.data.trivia.replace('See more >>', '').trim() : undefined;\n      data.metadata.goofs = response.data.goofs;\n      data.metadata.votes = response.data.votes;\n      data.metadata.language = response.data.language ? response.data.language : Array();\n      data.metadata.aka = response.data.aka ? response.data.aka : Array();\n      data.metadata.awards = response.data.awards ? response.data.awards : Array();\n      data.metadata.tagline = response.data.tagline;\n\n      if (data.type === 'episode' && response.data.episodeof) {\n        data.metadata.show_imdbid = Object.keys(response.data.episodeof).length > 0 ? Object.keys(response.data.episodeof)[0].replace('_', 'tt') : undefined;\n      }\n    }\n\n    return data;\n  }\n\n}();","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/node_modules/opensubtitles-api/lib/identify.js"],"names":["libhash","require","path","fs","module","exports","LibID","readNFO","file","p","parse","nfo","join","dir","name","detectedId","existsSync","f","readdirSync","match","readFileSync","toString","undefined","parseResponse","response","info","data","String","status","Error","Object","moviehash","keys","length","subcount","SubCount","added","accepted_moviehashes","metadata","imdbid","MovieImdbID","title","MovieName","year","MovieYear","SeriesEpisode","SeriesSeason","episode","season","episode_title","split","trim","moviebytesize","imdb","replace","extend","kind","type","cast","country","Array","cover","directors","duration","genres","rating","synopsis","plot","trivia","goofs","votes","language","aka","awards","tagline","episodeof","show_imdbid"],"mappings":"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","sourcesContent":["const libhash = require('./hash.js')\r\n\r\nconst path = require('path')\r\nconst fs = require('fs')\r\n\r\nmodule.exports = new class LibID {\r\n    readNFO(file) {\r\n        let p = path.parse(file)\r\n        let nfo = path.join(p.dir, p.name + '.nfo')\r\n        let detectedId\r\n\r\n        if (!fs.existsSync(nfo)) {\r\n            for (let f of fs.readdirSync(p.dir)) {\r\n                if (f.match(/\\.nfo/i) !== null) {\r\n                    nfo = path.join(p.dir, f)\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fs.existsSync(nfo)) detectedId = fs.readFileSync(nfo).toString().match(/tt\\d+/i)\r\n        return detectedId ? detectedId[0] : undefined\r\n    }\r\n\r\n\r\n    parseResponse(response, info) {\r\n        if (response.data === String() || !response.status.match(/200/)) throw new Error(response.status || 'OpenSubtitles unknown error')\r\n\r\n        let data = Object()\r\n\r\n        if (response.data[info.moviehash] && Object.keys(response.data[info.moviehash]).length) { // we got valid info\r\n            data = {\r\n                subcount: response.data[info.moviehash].SubCount,\r\n                added: response.data.accepted_moviehashes ? true : false,\r\n                metadata: {\r\n                    imdbid: response.data[info.moviehash].MovieImdbID !== '0' ? 'tt' + response.data[info.moviehash].MovieImdbID : undefined,\r\n                    title: response.data[info.moviehash].MovieName,\r\n                    year: response.data[info.moviehash].MovieYear,\r\n                }\r\n            }\r\n            if (response.data[info.moviehash].SeriesEpisode + response.data[info.moviehash].SeriesSeason !== '00') {\r\n                data.metadata.episode = response.data[info.moviehash].SeriesEpisode\r\n                data.metadata.season = response.data[info.moviehash].SeriesSeason\r\n                data.metadata.episode_title = data.metadata.title.split('\"')[2].trim()\r\n                data.metadata.title = data.metadata.title.split('\"')[1].trim()\r\n            }\r\n\r\n        } else if (response.data.accepted_moviehashes && response.data.accepted_moviehashes.length) { // we pushed new hash\r\n            data.added = true\r\n        } else { // this was a waste of time\r\n            data.added = false\r\n        }\r\n\r\n        data.moviehash = info.moviehash // inject moviehash\r\n        data.moviebytesize = info.moviebytesize // inject moviebytesize\r\n\r\n        if (info.imdb && !data.metadata) { // inject imdb if possible\r\n            data.metadata = {\r\n                imdbid: 'tt' + info.imdb.replace('tt', '')\r\n            }\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    extend(data, response) {\r\n        if (response.data !== String() && response.status.match(/200/)) {\r\n            if (response.data.kind && response.data.kind.match(/episode/i)) {\r\n                data.type = 'episode'\r\n            } else if (response.data.kind && response.data.kind.match(/movie/i)) {\r\n                data.type = 'movie'\r\n            } else {\r\n                delete data.metadata\r\n                return data // it is impossible that a single file is an entire show\r\n            }\r\n\r\n            data.metadata.cast = response.data.cast ? response.data.cast : Object()\r\n            data.metadata.country = response.data.country ? response.data.country : Array()\r\n            data.metadata.cover = response.data.cover\r\n            data.metadata.directors = response.data.directors ? response.data.directors : Object()\r\n            data.metadata.duration = response.data.duration\r\n            data.metadata.genres = response.data.genres ? response.data.genres : Array()\r\n            data.metadata.rating = response.data.rating\r\n            data.metadata.synopsis = response.data.plot && response.data.plot.match(/add a plot/i) !== null ? undefined : response.data.plot\r\n            data.metadata.year = response.data.year\r\n            data.metadata.trivia = response.data.trivia ? response.data.trivia.replace('See more >>', '').trim() : undefined\r\n            data.metadata.goofs = response.data.goofs\r\n            data.metadata.votes = response.data.votes\r\n            data.metadata.language = response.data.language ? response.data.language : Array()\r\n            data.metadata.aka = response.data.aka ? response.data.aka : Array()\r\n            data.metadata.awards = response.data.awards ? response.data.awards : Array()\r\n            data.metadata.tagline = response.data.tagline\r\n\r\n            if (data.type === 'episode' && response.data.episodeof) {\r\n                data.metadata.show_imdbid = Object.keys(response.data.episodeof).length > 0 ? Object.keys(response.data.episodeof)[0].replace('_','tt') : undefined\r\n            }\r\n        }\r\n\r\n        return data\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}