{"ast":null,"code":"/**\n * Creates object for cookies manipulation on client side.\n * Allows to parse server's response in order to get cookies and compose http request to transfer cookies to the server\n * @constructor\n */\nfunction Cookies() {\n  this.cookies = {};\n}\n\nCookies.prototype = {\n  /**\n   * Obtains value of the cookie with specified name.\n   * This call checks expiration dates and does not return expired cookies.\n   * @param {String} name cookie name\n   * @return {String} cookie value or null\n   */\n  get: function (name) {\n    var cookie = this.cookies[name];\n\n    if (cookie && this.checkNotExpired(name)) {\n      return this.cookies[name].value;\n    }\n\n    return null;\n  },\n\n  /**\n   * Sets cookie's value and optional options\n   * @param {String} name cookie's name\n   * @param {String} value value\n   * @param {Object} options with the following fields:\n   *  - {Boolean} secure - is cookie secure or not (does not mean anything for now)\n   *  - {Date} expires - cookie's expiration date. If specified then cookie will disappear after that date\n   */\n  set: function (name, value, options) {\n    var cookie = typeof options == 'object' ? {\n      value: value,\n      expires: options.expires,\n      secure: options.secure || false,\n      new: options.new || false\n    } : {\n      value: value\n    };\n\n    if (this.checkNotExpired(name, cookie)) {\n      this.cookies[name] = cookie;\n    }\n  },\n  // For testing purposes\n  getExpirationDate: function (name) {\n    return this.cookies[name] ? this.cookies[name].expires : null;\n  },\n  // Internal function\n  checkNotExpired: function (name, cookie) {\n    if (typeof cookie === 'undefined') {\n      cookie = this.cookies[name];\n    }\n\n    var now = new Date();\n\n    if (cookie && cookie.expires && now > cookie.expires) {\n      delete this.cookies[name];\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * Parses headers from server's response for 'set-cookie' header and store cookie's values.\n   * Also parses expiration date\n   * @param headers\n   */\n  parseResponse: function (headers) {\n    var cookies = headers['set-cookie'];\n\n    if (cookies) {\n      cookies.forEach(function (c) {\n        var cookiesParams = c.split(';');\n        var cookiePair = cookiesParams.shift().split('=');\n        var options = {};\n        cookiesParams.forEach(function (param) {\n          param = param.trim();\n\n          if (param.toLowerCase().indexOf('expires') == 0) {\n            var date = param.split('=')[1].trim();\n            options.expires = new Date(date);\n          }\n        });\n        this.set(cookiePair[0].trim(), cookiePair[1].trim(), options);\n      }.bind(this));\n    }\n  },\n\n  /**\n   * Adds cookies to the provided headers as array. Does nothing if there are no cookies stored.\n   * This call checks expiration dates and does not add expired cookies.\n   * @param headers\n   */\n  composeRequest: function (headers) {\n    if (Object.keys(this.cookies).length == 0) {\n      return;\n    }\n\n    headers['Cookie'] = this.toString();\n  },\n\n  /**\n   *\n   * @return {String} cookies as 'name=value' pairs joined by semicolon\n   */\n  toString: function () {\n    return Object.keys(this.cookies).filter(this.checkNotExpired.bind(this)).map(function (name) {\n      return name + '=' + this.cookies[name].value;\n    }.bind(this)).join(';');\n  }\n};\nmodule.exports = Cookies;","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/node_modules/xmlrpc/lib/cookies.js"],"names":["Cookies","cookies","prototype","get","name","cookie","checkNotExpired","value","set","options","expires","secure","new","getExpirationDate","now","Date","parseResponse","headers","forEach","c","cookiesParams","split","cookiePair","shift","param","trim","toLowerCase","indexOf","date","bind","composeRequest","Object","keys","length","toString","filter","map","join","module","exports"],"mappings":"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","sourcesContent":["/**\n * Creates object for cookies manipulation on client side.\n * Allows to parse server's response in order to get cookies and compose http request to transfer cookies to the server\n * @constructor\n */\nfunction Cookies() {\n  this.cookies = {}\n}\n\nCookies.prototype = {\n  /**\n   * Obtains value of the cookie with specified name.\n   * This call checks expiration dates and does not return expired cookies.\n   * @param {String} name cookie name\n   * @return {String} cookie value or null\n   */\n  get: function(name) {\n    var cookie = this.cookies[name]\n    if (cookie && this.checkNotExpired(name)) {\n      return this.cookies[name].value\n    }\n    return null\n  },\n\n  /**\n   * Sets cookie's value and optional options\n   * @param {String} name cookie's name\n   * @param {String} value value\n   * @param {Object} options with the following fields:\n   *  - {Boolean} secure - is cookie secure or not (does not mean anything for now)\n   *  - {Date} expires - cookie's expiration date. If specified then cookie will disappear after that date\n   */\n  set: function(name, value, options) {\n    var cookie = typeof options == 'object'\n        ? {value: value, expires: options.expires, secure: options.secure || false, new: options.new || false}\n        : {value: value}\n    if (this.checkNotExpired(name, cookie)) {\n      this.cookies[name] = cookie\n    }\n  },\n\n  // For testing purposes\n  getExpirationDate: function(name) {\n    return this.cookies[name] ? this.cookies[name].expires : null\n  },\n\n  // Internal function\n  checkNotExpired: function(name, cookie) {\n    if (typeof cookie === 'undefined') {\n      cookie = this.cookies[name]\n    }\n    var now = new Date()\n    if (cookie && cookie.expires && now > cookie.expires) {\n      delete this.cookies[name]\n      return false\n    }\n    return true\n  },\n\n\n  /**\n   * Parses headers from server's response for 'set-cookie' header and store cookie's values.\n   * Also parses expiration date\n   * @param headers\n   */\n  parseResponse: function(headers) {\n    var cookies = headers['set-cookie']\n    if (cookies) {\n      cookies.forEach(function(c) {\n        var cookiesParams = c.split(';')\n        var cookiePair = cookiesParams.shift().split('=')\n        var options = {}\n        cookiesParams.forEach(function(param) {\n          param = param.trim()\n          if (param.toLowerCase().indexOf('expires') == 0) {\n            var date = param.split('=')[1].trim()\n            options.expires = new Date(date)\n          }\n        })\n        this.set(cookiePair[0].trim(), cookiePair[1].trim(), options)\n      }.bind(this))\n    }\n  },\n\n  /**\n   * Adds cookies to the provided headers as array. Does nothing if there are no cookies stored.\n   * This call checks expiration dates and does not add expired cookies.\n   * @param headers\n   */\n  composeRequest: function(headers) {\n    if (Object.keys(this.cookies).length == 0) {\n      return\n    }\n    headers['Cookie'] = this.toString()\n  },\n\n\n  /**\n   *\n   * @return {String} cookies as 'name=value' pairs joined by semicolon\n   */\n  toString: function() {\n    return Object.keys(this.cookies)\n      .filter(this.checkNotExpired.bind(this))\n      .map(function(name) {\n      return name + '=' + this.cookies[name].value\n    }.bind(this)).join(';')\n  }\n}\n\nmodule.exports = Cookies\n"]},"metadata":{},"sourceType":"script"}