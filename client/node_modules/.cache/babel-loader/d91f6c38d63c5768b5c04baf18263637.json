{"ast":null,"code":"var http = require('http'),\n    https = require('https'),\n    url = require('url'),\n    EventEmitter = require('events').EventEmitter,\n    Serializer = require('./serializer'),\n    Deserializer = require('./deserializer');\n/**\n * Creates a new Server object. Also creates an HTTP server to start listening\n * for XML-RPC method calls. Will emit an event with the XML-RPC call's method\n * name when receiving a method call.\n *\n * @constructor\n * @param {Object|String} options - The HTTP server options. Either a URI string\n *                                  (e.g. 'http://localhost:9090') or an object\n *                                  with fields:\n *   - {String} host              - (optional)\n *   - {Number} port\n * @param {Boolean} isSecure      - True if using https for making calls,\n *                                  otherwise false.\n * @return {Server}\n */\n\n\nfunction Server(options, isSecure, onListening) {\n  if (false === this instanceof Server) {\n    return new Server(options, isSecure);\n  }\n\n  onListening = onListening || function () {};\n\n  var that = this; // If a string URI is passed in, converts to URI fields\n\n  if (typeof options === 'string') {\n    options = url.parse(options);\n    options.host = options.hostname;\n    options.path = options.pathname;\n  }\n\n  function handleMethodCall(request, response) {\n    var deserializer = new Deserializer();\n    deserializer.deserializeMethodCall(request, function (error, methodName, params) {\n      if (Object.prototype.hasOwnProperty.call(that._events, methodName)) {\n        that.emit(methodName, null, params, function (error, value) {\n          var xml = null;\n\n          if (error !== null) {\n            xml = Serializer.serializeFault(error);\n          } else {\n            xml = Serializer.serializeMethodResponse(value);\n          }\n\n          response.writeHead(200, {\n            'Content-Type': 'text/xml'\n          });\n          response.end(xml);\n        });\n      } else {\n        that.emit('NotFound', methodName, params);\n        response.writeHead(404);\n        response.end();\n      }\n    });\n  }\n\n  this.httpServer = isSecure ? https.createServer(options, handleMethodCall) : http.createServer(handleMethodCall);\n  process.nextTick(function () {\n    this.httpServer.listen(options.port, options.host, onListening);\n  }.bind(this));\n\n  this.close = function (callback) {\n    this.httpServer.once('close', callback);\n    this.httpServer.close();\n  }.bind(this);\n} // Inherit from EventEmitter to emit and listen\n\n\nServer.prototype.__proto__ = EventEmitter.prototype;\nmodule.exports = Server;","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/node_modules/xmlrpc/lib/server.js"],"names":["http","require","https","url","EventEmitter","Serializer","Deserializer","Server","options","isSecure","onListening","that","parse","host","hostname","path","pathname","handleMethodCall","request","response","deserializer","deserializeMethodCall","error","methodName","params","Object","prototype","hasOwnProperty","call","_events","emit","value","xml","serializeFault","serializeMethodResponse","writeHead","end","httpServer","createServer","process","nextTick","listen","port","bind","close","callback","once","__proto__","module","exports"],"mappings":"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","sourcesContent":["var http             = require('http')\n  , https            = require('https')\n  , url              = require('url')\n  , EventEmitter     = require('events').EventEmitter\n  , Serializer       = require('./serializer')\n  , Deserializer     = require('./deserializer')\n\n/**\n * Creates a new Server object. Also creates an HTTP server to start listening\n * for XML-RPC method calls. Will emit an event with the XML-RPC call's method\n * name when receiving a method call.\n *\n * @constructor\n * @param {Object|String} options - The HTTP server options. Either a URI string\n *                                  (e.g. 'http://localhost:9090') or an object\n *                                  with fields:\n *   - {String} host              - (optional)\n *   - {Number} port\n * @param {Boolean} isSecure      - True if using https for making calls,\n *                                  otherwise false.\n * @return {Server}\n */\nfunction Server(options, isSecure, onListening) {\n\n  if (false === (this instanceof Server)) {\n    return new Server(options, isSecure)\n  }\n  onListening = onListening || function() {}\n  var that = this\n\n  // If a string URI is passed in, converts to URI fields\n  if (typeof options === 'string') {\n    options = url.parse(options)\n    options.host = options.hostname\n    options.path = options.pathname\n  }\n\n  function handleMethodCall(request, response) {\n    var deserializer = new Deserializer()\n    deserializer.deserializeMethodCall(request, function(error, methodName, params) {\n      if (Object.prototype.hasOwnProperty.call(that._events, methodName)) {\n        that.emit(methodName, null, params, function(error, value) {\n          var xml = null\n          if (error !== null) {\n            xml = Serializer.serializeFault(error)\n          }\n          else {\n            xml = Serializer.serializeMethodResponse(value)\n          }\n          response.writeHead(200, {'Content-Type': 'text/xml'})\n          response.end(xml)\n        })\n      }\n      else {\n        that.emit('NotFound', methodName, params)\n        response.writeHead(404)\n        response.end()\n      }\n    })\n  }\n\n  this.httpServer = isSecure ? https.createServer(options, handleMethodCall)\n                            : http.createServer(handleMethodCall)\n\n  process.nextTick(function() {\n    this.httpServer.listen(options.port, options.host, onListening)\n  }.bind(this))\n  this.close = function(callback) {\n    this.httpServer.once('close', callback)\n    this.httpServer.close()\n  }.bind(this)\n}\n\n// Inherit from EventEmitter to emit and listen\nServer.prototype.__proto__ = EventEmitter.prototype\n\nmodule.exports = Server\n\n"]},"metadata":{},"sourceType":"script"}