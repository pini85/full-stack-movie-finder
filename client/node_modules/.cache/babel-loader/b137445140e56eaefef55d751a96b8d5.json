{"ast":null,"code":"var sax = require('sax'),\n    dateFormatter = require('./date_formatter');\n\nvar Deserializer = function (encoding) {\n  this.type = null;\n  this.responseType = null;\n  this.stack = [];\n  this.marks = [];\n  this.data = [];\n  this.methodname = null;\n  this.encoding = encoding || 'utf8';\n  this.value = false;\n  this.callback = null;\n  this.error = null;\n  this.parser = sax.createStream();\n  this.parser.on('opentag', this.onOpentag.bind(this));\n  this.parser.on('closetag', this.onClosetag.bind(this));\n  this.parser.on('text', this.onText.bind(this));\n  this.parser.on('cdata', this.onCDATA.bind(this));\n  this.parser.on('end', this.onDone.bind(this));\n  this.parser.on('error', this.onError.bind(this));\n};\n\nDeserializer.prototype.deserializeMethodResponse = function (stream, callback) {\n  var that = this;\n\n  this.callback = function (error, result) {\n    if (error) {\n      callback(error);\n    } else if (result.length > 1) {\n      callback(new Error('Response has more than one param'));\n    } else if (that.type !== 'methodresponse') {\n      callback(new Error('Not a method response'));\n    } else if (!that.responseType) {\n      callback(new Error('Invalid method response'));\n    } else {\n      callback(null, result[0]);\n    }\n  };\n\n  stream.setEncoding(this.encoding);\n  stream.on('error', this.onError.bind(this));\n  stream.pipe(this.parser);\n};\n\nDeserializer.prototype.deserializeMethodCall = function (stream, callback) {\n  var that = this;\n\n  this.callback = function (error, result) {\n    if (error) {\n      callback(error);\n    } else if (that.type !== 'methodcall') {\n      callback(new Error('Not a method call'));\n    } else if (!that.methodname) {\n      callback(new Error('Method call did not contain a method name'));\n    } else {\n      callback(null, that.methodname, result);\n    }\n  };\n\n  stream.setEncoding(this.encoding);\n  stream.on('error', this.onError.bind(this));\n  stream.pipe(this.parser);\n};\n\nDeserializer.prototype.onDone = function () {\n  var that = this;\n\n  if (!this.error) {\n    if (this.type === null || this.marks.length) {\n      this.callback(new Error('Invalid XML-RPC message'));\n    } else if (this.responseType === 'fault') {\n      var createFault = function (fault) {\n        var error = new Error('XML-RPC fault' + (fault.faultString ? ': ' + fault.faultString : ''));\n        error.code = fault.faultCode;\n        error.faultCode = fault.faultCode;\n        error.faultString = fault.faultString;\n        return error;\n      };\n\n      this.callback(createFault(this.stack[0]));\n    } else {\n      this.callback(undefined, this.stack);\n    }\n  }\n}; // TODO:\n// Error handling needs a little thinking. There are two different kinds of\n// errors: \n//   1. Low level errors like network, stream or xml errors. These don't\n//      require special treatment. They only need to be forwarded. The IO\n//      is already stopped in these cases. \n//   2. Protocol errors: Invalid tags, invalid values &c. These happen in\n//      our code and we should tear down the IO and stop parsing.\n// Currently all errors end here. Guess I'll split it up. \n\n\nDeserializer.prototype.onError = function (msg) {\n  if (!this.error) {\n    if (typeof msg === 'string') {\n      this.error = new Error(msg);\n    } else {\n      this.error = msg;\n    }\n\n    this.callback(this.error);\n  }\n};\n\nDeserializer.prototype.push = function (value) {\n  this.stack.push(value);\n}; //==============================================================================\n// SAX Handlers\n//==============================================================================\n\n\nDeserializer.prototype.onOpentag = function (node) {\n  if (node.name === 'ARRAY' || node.name === 'STRUCT') {\n    this.marks.push(this.stack.length);\n  }\n\n  this.data = [];\n  this.value = node.name === 'VALUE';\n};\n\nDeserializer.prototype.onText = function (text) {\n  this.data.push(text);\n};\n\nDeserializer.prototype.onCDATA = function (cdata) {\n  this.data.push(cdata);\n};\n\nDeserializer.prototype.onClosetag = function (el) {\n  var data = this.data.join('');\n\n  try {\n    switch (el) {\n      case 'BOOLEAN':\n        this.endBoolean(data);\n        break;\n\n      case 'INT':\n      case 'I4':\n        this.endInt(data);\n        break;\n\n      case 'I8':\n        this.endI8(data);\n        break;\n\n      case 'DOUBLE':\n        this.endDouble(data);\n        break;\n\n      case 'STRING':\n      case 'NAME':\n        this.endString(data);\n        break;\n\n      case 'ARRAY':\n        this.endArray(data);\n        break;\n\n      case 'STRUCT':\n        this.endStruct(data);\n        break;\n\n      case 'BASE64':\n        this.endBase64(data);\n        break;\n\n      case 'DATETIME.ISO8601':\n        this.endDateTime(data);\n        break;\n\n      case 'VALUE':\n        this.endValue(data);\n        break;\n\n      case 'PARAMS':\n        this.endParams(data);\n        break;\n\n      case 'FAULT':\n        this.endFault(data);\n        break;\n\n      case 'METHODRESPONSE':\n        this.endMethodResponse(data);\n        break;\n\n      case 'METHODNAME':\n        this.endMethodName(data);\n        break;\n\n      case 'METHODCALL':\n        this.endMethodCall(data);\n        break;\n\n      case 'NIL':\n        this.endNil(data);\n        break;\n\n      case 'DATA':\n      case 'PARAM':\n      case 'MEMBER':\n        // Ignored by design\n        break;\n\n      default:\n        this.onError('Unknown XML-RPC tag \\'' + el + '\\'');\n        break;\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n};\n\nDeserializer.prototype.endNil = function (data) {\n  this.push(null);\n  this.value = false;\n};\n\nDeserializer.prototype.endBoolean = function (data) {\n  if (data === '1') {\n    this.push(true);\n  } else if (data === '0') {\n    this.push(false);\n  } else {\n    throw new Error('Illegal boolean value \\'' + data + '\\'');\n  }\n\n  this.value = false;\n};\n\nDeserializer.prototype.endInt = function (data) {\n  var value = parseInt(data, 10);\n\n  if (isNaN(value)) {\n    throw new Error('Expected an integer but got \\'' + data + '\\'');\n  } else {\n    this.push(value);\n    this.value = false;\n  }\n};\n\nDeserializer.prototype.endDouble = function (data) {\n  var value = parseFloat(data);\n\n  if (isNaN(value)) {\n    throw new Error('Expected a double but got \\'' + data + '\\'');\n  } else {\n    this.push(value);\n    this.value = false;\n  }\n};\n\nDeserializer.prototype.endString = function (data) {\n  this.push(data);\n  this.value = false;\n};\n\nDeserializer.prototype.endArray = function (data) {\n  var mark = this.marks.pop();\n  this.stack.splice(mark, this.stack.length - mark, this.stack.slice(mark));\n  this.value = false;\n};\n\nDeserializer.prototype.endStruct = function (data) {\n  var mark = this.marks.pop(),\n      struct = {},\n      items = this.stack.slice(mark),\n      i = 0;\n\n  for (; i < items.length; i += 2) {\n    struct[items[i]] = items[i + 1];\n  }\n\n  this.stack.splice(mark, this.stack.length - mark, struct);\n  this.value = false;\n};\n\nDeserializer.prototype.endBase64 = function (data) {\n  var buffer = new Buffer(data, 'base64');\n  this.push(buffer);\n  this.value = false;\n};\n\nDeserializer.prototype.endDateTime = function (data) {\n  var date = dateFormatter.decodeIso8601(data);\n  this.push(date);\n  this.value = false;\n};\n\nvar isInteger = /^-?\\d+$/;\n\nDeserializer.prototype.endI8 = function (data) {\n  if (!isInteger.test(data)) {\n    throw new Error('Expected integer (I8) value but got \\'' + data + '\\'');\n  } else {\n    this.endString(data);\n  }\n};\n\nDeserializer.prototype.endValue = function (data) {\n  if (this.value) {\n    this.endString(data);\n  }\n};\n\nDeserializer.prototype.endParams = function (data) {\n  this.responseType = 'params';\n};\n\nDeserializer.prototype.endFault = function (data) {\n  this.responseType = 'fault';\n};\n\nDeserializer.prototype.endMethodResponse = function (data) {\n  this.type = 'methodresponse';\n};\n\nDeserializer.prototype.endMethodName = function (data) {\n  this.methodname = data;\n};\n\nDeserializer.prototype.endMethodCall = function (data) {\n  this.type = 'methodcall';\n};\n\nmodule.exports = Deserializer;","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/node_modules/xmlrpc/lib/deserializer.js"],"names":["sax","require","dateFormatter","Deserializer","encoding","type","responseType","stack","marks","data","methodname","value","callback","error","parser","createStream","on","onOpentag","bind","onClosetag","onText","onCDATA","onDone","onError","prototype","deserializeMethodResponse","stream","that","result","length","Error","setEncoding","pipe","deserializeMethodCall","createFault","fault","faultString","code","faultCode","undefined","msg","push","node","name","text","cdata","el","join","endBoolean","endInt","endI8","endDouble","endString","endArray","endStruct","endBase64","endDateTime","endValue","endParams","endFault","endMethodResponse","endMethodName","endMethodCall","endNil","e","parseInt","isNaN","parseFloat","mark","pop","splice","slice","struct","items","i","buffer","Buffer","date","decodeIso8601","isInteger","test","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAaC,OAAO,CAAC,KAAD,CAA3B;AAAA,IACIC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAD3B;;AAGA,IAAIE,YAAY,GAAG,UAASC,QAAT,EAAmB;AACpC,OAAKC,IAAL,GAAY,IAAZ;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,UAAL,GAAkB,IAAlB;AACA,OAAKN,QAAL,GAAgBA,QAAQ,IAAI,MAA5B;AACA,OAAKO,KAAL,GAAa,KAAb;AACA,OAAKC,QAAL,GAAgB,IAAhB;AACA,OAAKC,KAAL,GAAa,IAAb;AAEA,OAAKC,MAAL,GAAcd,GAAG,CAACe,YAAJ,EAAd;AACA,OAAKD,MAAL,CAAYE,EAAZ,CAAe,SAAf,EAA2B,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAA3B;AACA,OAAKJ,MAAL,CAAYE,EAAZ,CAAe,UAAf,EAA2B,KAAKG,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAA3B;AACA,OAAKJ,MAAL,CAAYE,EAAZ,CAAe,MAAf,EAA2B,KAAKI,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAA3B;AACA,OAAKJ,MAAL,CAAYE,EAAZ,CAAe,OAAf,EAA2B,KAAKK,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAA3B;AACA,OAAKJ,MAAL,CAAYE,EAAZ,CAAe,KAAf,EAA2B,KAAKM,MAAL,CAAYJ,IAAZ,CAAiB,IAAjB,CAA3B;AACA,OAAKJ,MAAL,CAAYE,EAAZ,CAAe,OAAf,EAA2B,KAAKO,OAAL,CAAaL,IAAb,CAAkB,IAAlB,CAA3B;AACD,CAnBD;;AAqBAf,YAAY,CAACqB,SAAb,CAAuBC,yBAAvB,GAAmD,UAASC,MAAT,EAAiBd,QAAjB,EAA2B;AAC5E,MAAIe,IAAI,GAAG,IAAX;;AAEA,OAAKf,QAAL,GAAgB,UAASC,KAAT,EAAgBe,MAAhB,EAAwB;AACtC,QAAIf,KAAJ,EAAW;AACTD,MAAAA,QAAQ,CAACC,KAAD,CAAR;AACD,KAFD,MAGK,IAAIe,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AAC1BjB,MAAAA,QAAQ,CAAC,IAAIkB,KAAJ,CAAU,kCAAV,CAAD,CAAR;AACD,KAFI,MAGA,IAAIH,IAAI,CAACtB,IAAL,KAAc,gBAAlB,EAAoC;AACvCO,MAAAA,QAAQ,CAAC,IAAIkB,KAAJ,CAAU,uBAAV,CAAD,CAAR;AACD,KAFI,MAGA,IAAI,CAACH,IAAI,CAACrB,YAAV,EAAwB;AAC3BM,MAAAA,QAAQ,CAAC,IAAIkB,KAAJ,CAAU,yBAAV,CAAD,CAAR;AACD,KAFI,MAGA;AACHlB,MAAAA,QAAQ,CAAC,IAAD,EAAOgB,MAAM,CAAC,CAAD,CAAb,CAAR;AACD;AACF,GAhBD;;AAkBAF,EAAAA,MAAM,CAACK,WAAP,CAAmB,KAAK3B,QAAxB;AACAsB,EAAAA,MAAM,CAACV,EAAP,CAAU,OAAV,EAAmB,KAAKO,OAAL,CAAaL,IAAb,CAAkB,IAAlB,CAAnB;AACAQ,EAAAA,MAAM,CAACM,IAAP,CAAY,KAAKlB,MAAjB;AACD,CAxBD;;AA0BAX,YAAY,CAACqB,SAAb,CAAuBS,qBAAvB,GAA+C,UAASP,MAAT,EAAiBd,QAAjB,EAA2B;AACxE,MAAIe,IAAI,GAAG,IAAX;;AAEA,OAAKf,QAAL,GAAgB,UAASC,KAAT,EAAgBe,MAAhB,EAAwB;AACtC,QAAIf,KAAJ,EAAW;AACTD,MAAAA,QAAQ,CAACC,KAAD,CAAR;AACD,KAFD,MAGK,IAAIc,IAAI,CAACtB,IAAL,KAAc,YAAlB,EAAgC;AACnCO,MAAAA,QAAQ,CAAC,IAAIkB,KAAJ,CAAU,mBAAV,CAAD,CAAR;AACD,KAFI,MAGA,IAAI,CAACH,IAAI,CAACjB,UAAV,EAAsB;AACzBE,MAAAA,QAAQ,CAAC,IAAIkB,KAAJ,CAAU,2CAAV,CAAD,CAAR;AACD,KAFI,MAGA;AACHlB,MAAAA,QAAQ,CAAC,IAAD,EAAOe,IAAI,CAACjB,UAAZ,EAAwBkB,MAAxB,CAAR;AACD;AACF,GAbD;;AAeAF,EAAAA,MAAM,CAACK,WAAP,CAAmB,KAAK3B,QAAxB;AACAsB,EAAAA,MAAM,CAACV,EAAP,CAAU,OAAV,EAAmB,KAAKO,OAAL,CAAaL,IAAb,CAAkB,IAAlB,CAAnB;AACAQ,EAAAA,MAAM,CAACM,IAAP,CAAY,KAAKlB,MAAjB;AACD,CArBD;;AAuBAX,YAAY,CAACqB,SAAb,CAAuBF,MAAvB,GAAgC,YAAW;AACzC,MAAIK,IAAI,GAAG,IAAX;;AAEA,MAAI,CAAC,KAAKd,KAAV,EAAiB;AACf,QAAI,KAAKR,IAAL,KAAc,IAAd,IAAsB,KAAKG,KAAL,CAAWqB,MAArC,EAA6C;AAC3C,WAAKjB,QAAL,CAAc,IAAIkB,KAAJ,CAAU,yBAAV,CAAd;AACD,KAFD,MAGK,IAAI,KAAKxB,YAAL,KAAsB,OAA1B,EAAmC;AACtC,UAAI4B,WAAW,GAAG,UAASC,KAAT,EAAgB;AAChC,YAAItB,KAAK,GAAG,IAAIiB,KAAJ,CAAU,mBAAmBK,KAAK,CAACC,WAAN,GAAoB,OAAOD,KAAK,CAACC,WAAjC,GAA+C,EAAlE,CAAV,CAAZ;AACAvB,QAAAA,KAAK,CAACwB,IAAN,GAAaF,KAAK,CAACG,SAAnB;AACAzB,QAAAA,KAAK,CAACyB,SAAN,GAAkBH,KAAK,CAACG,SAAxB;AACAzB,QAAAA,KAAK,CAACuB,WAAN,GAAoBD,KAAK,CAACC,WAA1B;AACA,eAAOvB,KAAP;AACD,OAND;;AAOA,WAAKD,QAAL,CAAcsB,WAAW,CAAC,KAAK3B,KAAL,CAAW,CAAX,CAAD,CAAzB;AACD,KATI,MAUA;AACH,WAAKK,QAAL,CAAc2B,SAAd,EAAyB,KAAKhC,KAA9B;AACD;AACF;AACF,CArBD,C,CAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,YAAY,CAACqB,SAAb,CAAuBD,OAAvB,GAAiC,UAASiB,GAAT,EAAc;AAC7C,MAAI,CAAC,KAAK3B,KAAV,EAAiB;AACf,QAAI,OAAO2B,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAK3B,KAAL,GAAa,IAAIiB,KAAJ,CAAUU,GAAV,CAAb;AACD,KAFD,MAGK;AACH,WAAK3B,KAAL,GAAa2B,GAAb;AACD;;AACD,SAAK5B,QAAL,CAAc,KAAKC,KAAnB;AACD;AACF,CAVD;;AAYAV,YAAY,CAACqB,SAAb,CAAuBiB,IAAvB,GAA8B,UAAS9B,KAAT,EAAgB;AAC5C,OAAKJ,KAAL,CAAWkC,IAAX,CAAgB9B,KAAhB;AACD,CAFD,C,CAIA;AACA;AACA;;;AAEAR,YAAY,CAACqB,SAAb,CAAuBP,SAAvB,GAAmC,UAASyB,IAAT,EAAe;AAChD,MAAIA,IAAI,CAACC,IAAL,KAAc,OAAd,IAAyBD,IAAI,CAACC,IAAL,KAAc,QAA3C,EAAqD;AACnD,SAAKnC,KAAL,CAAWiC,IAAX,CAAgB,KAAKlC,KAAL,CAAWsB,MAA3B;AACD;;AACD,OAAKpB,IAAL,GAAY,EAAZ;AACA,OAAKE,KAAL,GAAc+B,IAAI,CAACC,IAAL,KAAc,OAA5B;AACD,CAND;;AAQAxC,YAAY,CAACqB,SAAb,CAAuBJ,MAAvB,GAAgC,UAASwB,IAAT,EAAe;AAC7C,OAAKnC,IAAL,CAAUgC,IAAV,CAAeG,IAAf;AACD,CAFD;;AAIAzC,YAAY,CAACqB,SAAb,CAAuBH,OAAvB,GAAiC,UAASwB,KAAT,EAAgB;AAC/C,OAAKpC,IAAL,CAAUgC,IAAV,CAAeI,KAAf;AACD,CAFD;;AAIA1C,YAAY,CAACqB,SAAb,CAAuBL,UAAvB,GAAoC,UAAS2B,EAAT,EAAa;AAC/C,MAAIrC,IAAI,GAAG,KAAKA,IAAL,CAAUsC,IAAV,CAAe,EAAf,CAAX;;AACA,MAAI;AACF,YAAOD,EAAP;AACE,WAAK,SAAL;AACE,aAAKE,UAAL,CAAgBvC,IAAhB;AACA;;AACF,WAAK,KAAL;AACA,WAAK,IAAL;AACE,aAAKwC,MAAL,CAAYxC,IAAZ;AACA;;AACF,WAAK,IAAL;AACE,aAAKyC,KAAL,CAAWzC,IAAX;AACA;;AACF,WAAK,QAAL;AACE,aAAK0C,SAAL,CAAe1C,IAAf;AACA;;AACF,WAAK,QAAL;AACA,WAAK,MAAL;AACE,aAAK2C,SAAL,CAAe3C,IAAf;AACA;;AACF,WAAK,OAAL;AACE,aAAK4C,QAAL,CAAc5C,IAAd;AACA;;AACF,WAAK,QAAL;AACE,aAAK6C,SAAL,CAAe7C,IAAf;AACA;;AACF,WAAK,QAAL;AACE,aAAK8C,SAAL,CAAe9C,IAAf;AACA;;AACF,WAAK,kBAAL;AACE,aAAK+C,WAAL,CAAiB/C,IAAjB;AACA;;AACF,WAAK,OAAL;AACE,aAAKgD,QAAL,CAAchD,IAAd;AACA;;AACF,WAAK,QAAL;AACE,aAAKiD,SAAL,CAAejD,IAAf;AACA;;AACF,WAAK,OAAL;AACE,aAAKkD,QAAL,CAAclD,IAAd;AACA;;AACF,WAAK,gBAAL;AACE,aAAKmD,iBAAL,CAAuBnD,IAAvB;AACA;;AACF,WAAK,YAAL;AACE,aAAKoD,aAAL,CAAmBpD,IAAnB;AACA;;AACF,WAAK,YAAL;AACE,aAAKqD,aAAL,CAAmBrD,IAAnB;AACA;;AACF,WAAK,KAAL;AACE,aAAKsD,MAAL,CAAYtD,IAAZ;AACA;;AACF,WAAK,MAAL;AACA,WAAK,OAAL;AACA,WAAK,QAAL;AACE;AACA;;AACF;AACE,aAAKc,OAAL,CAAa,2BAA2BuB,EAA3B,GAAgC,IAA7C;AACA;AA1DJ;AA4DD,GA7DD,CA8DA,OAAOkB,CAAP,EAAU;AACR,SAAKzC,OAAL,CAAayC,CAAb;AACD;AACF,CAnED;;AAqEA7D,YAAY,CAACqB,SAAb,CAAuBuC,MAAvB,GAAgC,UAAStD,IAAT,EAAe;AAC7C,OAAKgC,IAAL,CAAU,IAAV;AACA,OAAK9B,KAAL,GAAa,KAAb;AACD,CAHD;;AAKAR,YAAY,CAACqB,SAAb,CAAuBwB,UAAvB,GAAoC,UAASvC,IAAT,EAAe;AACjD,MAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,SAAKgC,IAAL,CAAU,IAAV;AACD,GAFD,MAGK,IAAIhC,IAAI,KAAK,GAAb,EAAkB;AACrB,SAAKgC,IAAL,CAAU,KAAV;AACD,GAFI,MAGA;AACH,UAAM,IAAIX,KAAJ,CAAU,6BAA6BrB,IAA7B,GAAoC,IAA9C,CAAN;AACD;;AACD,OAAKE,KAAL,GAAa,KAAb;AACD,CAXD;;AAaAR,YAAY,CAACqB,SAAb,CAAuByB,MAAvB,GAAgC,UAASxC,IAAT,EAAe;AAC7C,MAAIE,KAAK,GAAGsD,QAAQ,CAACxD,IAAD,EAAO,EAAP,CAApB;;AACA,MAAIyD,KAAK,CAACvD,KAAD,CAAT,EAAkB;AAChB,UAAM,IAAImB,KAAJ,CAAU,mCAAmCrB,IAAnC,GAA0C,IAApD,CAAN;AACD,GAFD,MAGK;AACH,SAAKgC,IAAL,CAAU9B,KAAV;AACA,SAAKA,KAAL,GAAa,KAAb;AACD;AACF,CATD;;AAWAR,YAAY,CAACqB,SAAb,CAAuB2B,SAAvB,GAAmC,UAAS1C,IAAT,EAAe;AAChD,MAAIE,KAAK,GAAGwD,UAAU,CAAC1D,IAAD,CAAtB;;AACA,MAAIyD,KAAK,CAACvD,KAAD,CAAT,EAAkB;AAChB,UAAM,IAAImB,KAAJ,CAAU,iCAAiCrB,IAAjC,GAAwC,IAAlD,CAAN;AACD,GAFD,MAGK;AACH,SAAKgC,IAAL,CAAU9B,KAAV;AACA,SAAKA,KAAL,GAAa,KAAb;AACD;AACF,CATD;;AAWAR,YAAY,CAACqB,SAAb,CAAuB4B,SAAvB,GAAmC,UAAS3C,IAAT,EAAe;AAChD,OAAKgC,IAAL,CAAUhC,IAAV;AACA,OAAKE,KAAL,GAAa,KAAb;AACD,CAHD;;AAKAR,YAAY,CAACqB,SAAb,CAAuB6B,QAAvB,GAAkC,UAAS5C,IAAT,EAAe;AAC/C,MAAI2D,IAAI,GAAG,KAAK5D,KAAL,CAAW6D,GAAX,EAAX;AACA,OAAK9D,KAAL,CAAW+D,MAAX,CAAkBF,IAAlB,EAAwB,KAAK7D,KAAL,CAAWsB,MAAX,GAAoBuC,IAA5C,EAAkD,KAAK7D,KAAL,CAAWgE,KAAX,CAAiBH,IAAjB,CAAlD;AACA,OAAKzD,KAAL,GAAa,KAAb;AACD,CAJD;;AAMAR,YAAY,CAACqB,SAAb,CAAuB8B,SAAvB,GAAmC,UAAS7C,IAAT,EAAe;AAChD,MAAI2D,IAAI,GAAG,KAAK5D,KAAL,CAAW6D,GAAX,EAAX;AAAA,MACIG,MAAM,GAAG,EADb;AAAA,MAEIC,KAAK,GAAG,KAAKlE,KAAL,CAAWgE,KAAX,CAAiBH,IAAjB,CAFZ;AAAA,MAGIM,CAAC,GAAG,CAHR;;AAKA,SAAOA,CAAC,GAAGD,KAAK,CAAC5C,MAAjB,EAAyB6C,CAAC,IAAI,CAA9B,EAAiC;AAC/BF,IAAAA,MAAM,CAACC,KAAK,CAACC,CAAD,CAAN,CAAN,GAAmBD,KAAK,CAACC,CAAC,GAAG,CAAL,CAAxB;AACD;;AACD,OAAKnE,KAAL,CAAW+D,MAAX,CAAkBF,IAAlB,EAAwB,KAAK7D,KAAL,CAAWsB,MAAX,GAAoBuC,IAA5C,EAAkDI,MAAlD;AACA,OAAK7D,KAAL,GAAa,KAAb;AACD,CAXD;;AAaAR,YAAY,CAACqB,SAAb,CAAuB+B,SAAvB,GAAmC,UAAS9C,IAAT,EAAe;AAChD,MAAIkE,MAAM,GAAG,IAAIC,MAAJ,CAAWnE,IAAX,EAAiB,QAAjB,CAAb;AACA,OAAKgC,IAAL,CAAUkC,MAAV;AACA,OAAKhE,KAAL,GAAa,KAAb;AACD,CAJD;;AAMAR,YAAY,CAACqB,SAAb,CAAuBgC,WAAvB,GAAqC,UAAS/C,IAAT,EAAe;AAClD,MAAIoE,IAAI,GAAG3E,aAAa,CAAC4E,aAAd,CAA4BrE,IAA5B,CAAX;AACA,OAAKgC,IAAL,CAAUoC,IAAV;AACA,OAAKlE,KAAL,GAAa,KAAb;AACD,CAJD;;AAMA,IAAIoE,SAAS,GAAG,SAAhB;;AACA5E,YAAY,CAACqB,SAAb,CAAuB0B,KAAvB,GAA+B,UAASzC,IAAT,EAAe;AAC5C,MAAI,CAACsE,SAAS,CAACC,IAAV,CAAevE,IAAf,CAAL,EAA2B;AACzB,UAAM,IAAIqB,KAAJ,CAAU,2CAA2CrB,IAA3C,GAAkD,IAA5D,CAAN;AACD,GAFD,MAGK;AACH,SAAK2C,SAAL,CAAe3C,IAAf;AACD;AACF,CAPD;;AASAN,YAAY,CAACqB,SAAb,CAAuBiC,QAAvB,GAAkC,UAAShD,IAAT,EAAe;AAC/C,MAAI,KAAKE,KAAT,EAAgB;AACd,SAAKyC,SAAL,CAAe3C,IAAf;AACD;AACF,CAJD;;AAMAN,YAAY,CAACqB,SAAb,CAAuBkC,SAAvB,GAAmC,UAASjD,IAAT,EAAe;AAChD,OAAKH,YAAL,GAAoB,QAApB;AACD,CAFD;;AAIAH,YAAY,CAACqB,SAAb,CAAuBmC,QAAvB,GAAkC,UAASlD,IAAT,EAAe;AAC/C,OAAKH,YAAL,GAAoB,OAApB;AACD,CAFD;;AAIAH,YAAY,CAACqB,SAAb,CAAuBoC,iBAAvB,GAA2C,UAASnD,IAAT,EAAe;AACxD,OAAKJ,IAAL,GAAY,gBAAZ;AACD,CAFD;;AAIAF,YAAY,CAACqB,SAAb,CAAuBqC,aAAvB,GAAuC,UAASpD,IAAT,EAAe;AACpD,OAAKC,UAAL,GAAkBD,IAAlB;AACD,CAFD;;AAIAN,YAAY,CAACqB,SAAb,CAAuBsC,aAAvB,GAAuC,UAASrD,IAAT,EAAe;AACpD,OAAKJ,IAAL,GAAY,YAAZ;AACD,CAFD;;AAIA4E,MAAM,CAACC,OAAP,GAAiB/E,YAAjB","sourcesContent":["var sax           = require('sax')\n  , dateFormatter = require('./date_formatter')\n\nvar Deserializer = function(encoding) {\n  this.type = null\n  this.responseType = null\n  this.stack = []\n  this.marks = []\n  this.data = []\n  this.methodname = null\n  this.encoding = encoding || 'utf8'\n  this.value = false\n  this.callback = null\n  this.error = null\n\n  this.parser = sax.createStream()\n  this.parser.on('opentag',  this.onOpentag.bind(this))\n  this.parser.on('closetag', this.onClosetag.bind(this))\n  this.parser.on('text',     this.onText.bind(this))\n  this.parser.on('cdata',    this.onCDATA.bind(this))\n  this.parser.on('end',      this.onDone.bind(this))\n  this.parser.on('error',    this.onError.bind(this))\n}\n\nDeserializer.prototype.deserializeMethodResponse = function(stream, callback) {\n  var that = this\n\n  this.callback = function(error, result) {\n    if (error) {\n      callback(error)\n    }\n    else if (result.length > 1) {\n      callback(new Error('Response has more than one param'))\n    }\n    else if (that.type !== 'methodresponse') {\n      callback(new Error('Not a method response'))\n    }\n    else if (!that.responseType) {\n      callback(new Error('Invalid method response'))\n    }\n    else {\n      callback(null, result[0])\n    }\n  }\n\n  stream.setEncoding(this.encoding)\n  stream.on('error', this.onError.bind(this))\n  stream.pipe(this.parser)\n}\n\nDeserializer.prototype.deserializeMethodCall = function(stream, callback) {\n  var that = this\n\n  this.callback = function(error, result) {\n    if (error) {\n      callback(error)\n    }\n    else if (that.type !== 'methodcall') {\n      callback(new Error('Not a method call'))\n    }\n    else if (!that.methodname) {\n      callback(new Error('Method call did not contain a method name'))\n    }\n    else {\n      callback(null, that.methodname, result)\n    }\n  }\n\n  stream.setEncoding(this.encoding)\n  stream.on('error', this.onError.bind(this))\n  stream.pipe(this.parser)\n}\n\nDeserializer.prototype.onDone = function() {\n  var that = this\n\n  if (!this.error) {\n    if (this.type === null || this.marks.length) {\n      this.callback(new Error('Invalid XML-RPC message'))\n    }\n    else if (this.responseType === 'fault') {\n      var createFault = function(fault) {\n        var error = new Error('XML-RPC fault' + (fault.faultString ? ': ' + fault.faultString : ''))\n        error.code = fault.faultCode\n        error.faultCode = fault.faultCode\n        error.faultString = fault.faultString\n        return error\n      }\n      this.callback(createFault(this.stack[0]))\n    }\n    else {\n      this.callback(undefined, this.stack)\n    }\n  }\n}\n\n// TODO:\n// Error handling needs a little thinking. There are two different kinds of\n// errors: \n//   1. Low level errors like network, stream or xml errors. These don't\n//      require special treatment. They only need to be forwarded. The IO\n//      is already stopped in these cases. \n//   2. Protocol errors: Invalid tags, invalid values &c. These happen in\n//      our code and we should tear down the IO and stop parsing.\n// Currently all errors end here. Guess I'll split it up. \nDeserializer.prototype.onError = function(msg) {\n  if (!this.error) {\n    if (typeof msg === 'string') {\n      this.error = new Error(msg)\n    }\n    else {\n      this.error = msg\n    }\n    this.callback(this.error)\n  }\n}\n\nDeserializer.prototype.push = function(value) {\n  this.stack.push(value)\n}\n\n//==============================================================================\n// SAX Handlers\n//==============================================================================\n\nDeserializer.prototype.onOpentag = function(node) {\n  if (node.name === 'ARRAY' || node.name === 'STRUCT') {\n    this.marks.push(this.stack.length)\n  }\n  this.data = []\n  this.value = (node.name === 'VALUE')\n}\n\nDeserializer.prototype.onText = function(text) {\n  this.data.push(text)\n}\n\nDeserializer.prototype.onCDATA = function(cdata) {\n  this.data.push(cdata)\n}\n\nDeserializer.prototype.onClosetag = function(el) {\n  var data = this.data.join('')\n  try {\n    switch(el) {\n      case 'BOOLEAN':\n        this.endBoolean(data)\n        break\n      case 'INT':\n      case 'I4':\n        this.endInt(data)\n        break\n      case 'I8':\n        this.endI8(data)\n        break\n      case 'DOUBLE':\n        this.endDouble(data)\n        break\n      case 'STRING':\n      case 'NAME':\n        this.endString(data)\n        break\n      case 'ARRAY':\n        this.endArray(data)\n        break\n      case 'STRUCT':\n        this.endStruct(data)\n        break\n      case 'BASE64':\n        this.endBase64(data)\n        break\n      case 'DATETIME.ISO8601':\n        this.endDateTime(data)\n        break\n      case 'VALUE':\n        this.endValue(data)\n        break\n      case 'PARAMS':\n        this.endParams(data)\n        break\n      case 'FAULT':\n        this.endFault(data)\n        break\n      case 'METHODRESPONSE':\n        this.endMethodResponse(data)\n        break\n      case 'METHODNAME':\n        this.endMethodName(data)\n        break\n      case 'METHODCALL':\n        this.endMethodCall(data)\n        break\n      case 'NIL':\n        this.endNil(data)\n        break\n      case 'DATA':\n      case 'PARAM':\n      case 'MEMBER':\n        // Ignored by design\n        break\n      default:\n        this.onError('Unknown XML-RPC tag \\'' + el + '\\'')\n        break\n    }\n  }\n  catch (e) {\n    this.onError(e)\n  }\n}\n\nDeserializer.prototype.endNil = function(data) {\n  this.push(null)\n  this.value = false\n}\n\nDeserializer.prototype.endBoolean = function(data) {\n  if (data === '1') {\n    this.push(true)\n  }\n  else if (data === '0') {\n    this.push(false)\n  }\n  else {\n    throw new Error('Illegal boolean value \\'' + data + '\\'')\n  }\n  this.value = false\n}\n\nDeserializer.prototype.endInt = function(data) {\n  var value = parseInt(data, 10)\n  if (isNaN(value)) {\n    throw new Error('Expected an integer but got \\'' + data + '\\'')\n  }\n  else {\n    this.push(value)\n    this.value = false\n  }\n}\n\nDeserializer.prototype.endDouble = function(data) {\n  var value = parseFloat(data)\n  if (isNaN(value)) {\n    throw new Error('Expected a double but got \\'' + data + '\\'')\n  }\n  else {\n    this.push(value)\n    this.value = false\n  }\n}\n\nDeserializer.prototype.endString = function(data) {\n  this.push(data)\n  this.value = false\n}\n\nDeserializer.prototype.endArray = function(data) {\n  var mark = this.marks.pop()\n  this.stack.splice(mark, this.stack.length - mark, this.stack.slice(mark))\n  this.value = false\n}\n\nDeserializer.prototype.endStruct = function(data) {\n  var mark = this.marks.pop()\n    , struct = {}\n    , items = this.stack.slice(mark)\n    , i = 0\n\n  for (; i < items.length; i += 2) {\n    struct[items[i]] = items[i + 1]\n  }\n  this.stack.splice(mark, this.stack.length - mark, struct)\n  this.value = false\n}\n\nDeserializer.prototype.endBase64 = function(data) {\n  var buffer = new Buffer(data, 'base64')\n  this.push(buffer)\n  this.value = false\n}\n\nDeserializer.prototype.endDateTime = function(data) {\n  var date = dateFormatter.decodeIso8601(data)\n  this.push(date)\n  this.value = false\n}\n\nvar isInteger = /^-?\\d+$/\nDeserializer.prototype.endI8 = function(data) {\n  if (!isInteger.test(data)) {\n    throw new Error('Expected integer (I8) value but got \\'' + data + '\\'')\n  }\n  else {\n    this.endString(data)\n  }\n}\n\nDeserializer.prototype.endValue = function(data) {\n  if (this.value) {\n    this.endString(data)\n  }\n}\n\nDeserializer.prototype.endParams = function(data) {\n  this.responseType = 'params'\n}\n\nDeserializer.prototype.endFault = function(data) {\n  this.responseType = 'fault'\n}\n\nDeserializer.prototype.endMethodResponse = function(data) {\n  this.type = 'methodresponse'\n}\n\nDeserializer.prototype.endMethodName = function(data) {\n  this.methodname = data\n}\n\nDeserializer.prototype.endMethodCall = function(data) {\n  this.type = 'methodcall'\n}\n\nmodule.exports = Deserializer\n\n"]},"metadata":{},"sourceType":"script"}