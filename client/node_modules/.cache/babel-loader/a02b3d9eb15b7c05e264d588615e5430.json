{"ast":null,"code":"var _jsxFileName = \"/home/pinchas/code/projects/movie-finder/src/components/Trailer/Trailer.component.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchTrailers } from \"../../redux/actions/index\";\nimport YouTube from \"react-youtube\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"../Modal/Modal.component\";\nimport Carousel from \"../carousel/carousel.component\";\nimport useWidth from \"../../hooks/useWidth.hooks\";\nimport { TrailerContainer, TrailerPlay, YouTubeContainer } from \"./Trailer.styles\";\n\nconst Trailer = ({\n  poster,\n  fetchTrailers,\n  trailers,\n  colors\n}) => {\n  const width = useWidth().width;\n  const [isToggled, setToggled] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (isToggled) {\n        setLoading(true);\n        await fetchTrailers();\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [isToggled, fetchTrailers]);\n\n  const trailersYouTube = () => {\n    const optsYouTube = {\n      height: \"390\",\n      width: \"640\",\n      playerVars: {\n        autoplay: 0\n      }\n    };\n    return trailers && trailers.map(trailer => {\n      return /*#__PURE__*/React.createElement(YouTubeContainer, {\n        width: width,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(YouTube, {\n        videoId: trailer.key,\n        opts: optsYouTube,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }));\n    });\n  };\n\n  const handleClick = e => {\n    setToggled(true);\n    window.scrollTo(0, 0);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TrailerContainer, {\n    poster: poster,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TrailerPlay, {\n    color: colors.darkVibrant,\n    vibrant: colors.vibrant,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })), isToggled && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    skew: true,\n    isToggled: isToggled,\n    setToggled: setToggled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Carousel, {\n    items: trailersYouTube(),\n    type: \"trailers\",\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoPlay: false,\n    fade: true,\n    color: \"var(--primary-color)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), isLoading ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faFilm,\n    style: {\n      fontSize: \"10rem\",\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }) : null)));\n};\n\nconst mapStateToProps = state => ({\n  trailers: state.trailers,\n  colors: state.displayMovie.colors\n});\n\nexport default connect(mapStateToProps, {\n  fetchTrailers: fetchTrailers\n})(Trailer);","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/src/components/Trailer/Trailer.component.jsx"],"names":["React","useState","useEffect","connect","fetchTrailers","YouTube","FontAwesomeIcon","faFilm","Modal","Carousel","useWidth","TrailerContainer","TrailerPlay","YouTubeContainer","Trailer","poster","trailers","colors","width","isToggled","setToggled","isLoading","setLoading","fetchData","trailersYouTube","optsYouTube","height","playerVars","autoplay","map","trailer","key","handleClick","e","window","scrollTo","darkVibrant","vibrant","fontSize","color","mapStateToProps","state","displayMovie"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchTrailers } from \"../../redux/actions/index\";\nimport YouTube from \"react-youtube\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"../Modal/Modal.component\";\nimport Carousel from \"../carousel/carousel.component\";\nimport useWidth from \"../../hooks/useWidth.hooks\";\nimport {\n  TrailerContainer,\n  TrailerPlay,\n  YouTubeContainer,\n} from \"./Trailer.styles\";\n\nconst Trailer = ({ poster, fetchTrailers, trailers, colors }) => {\n  const width = useWidth().width;\n\n  const [isToggled, setToggled] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (isToggled) {\n        setLoading(true);\n        await fetchTrailers();\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [isToggled, fetchTrailers]);\n  const trailersYouTube = () => {\n    const optsYouTube = {\n      height: \"390\",\n      width: \"640\",\n      playerVars: {\n        autoplay: 0,\n      },\n    };\n\n    return (\n      trailers &&\n      trailers.map((trailer) => {\n        return (\n          <YouTubeContainer width={width}>\n            <YouTube videoId={trailer.key} opts={optsYouTube} />\n          </YouTubeContainer>\n        );\n      })\n    );\n  };\n  const handleClick = (e) => {\n    setToggled(true);\n    window.scrollTo(0, 0);\n  };\n\n  return (\n    <>\n      <TrailerContainer poster={poster}>\n        <TrailerPlay\n          color={colors.darkVibrant}\n          vibrant={colors.vibrant}\n          onClick={handleClick}\n        />\n      </TrailerContainer>\n      {isToggled && (\n        <div>\n          <Modal skew={true} isToggled={isToggled} setToggled={setToggled}>\n            <Carousel\n              items={trailersYouTube()}\n              type=\"trailers\"\n              slidesToShow={1}\n              slidesToScroll={1}\n              autoPlay={false}\n              fade={true}\n              color=\"var(--primary-color)\"\n            ></Carousel>\n            {isLoading ? (\n              <FontAwesomeIcon\n                icon={faFilm}\n                style={{ fontSize: \"10rem\", color: \"red\" }}\n              />\n            ) : null}\n          </Modal>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  trailers: state.trailers,\n  colors: state.displayMovie.colors,\n});\n\nexport default connect(mapStateToProps, {\n  fetchTrailers: fetchTrailers,\n})(Trailer);\n"]},"metadata":{},"sourceType":"module"}