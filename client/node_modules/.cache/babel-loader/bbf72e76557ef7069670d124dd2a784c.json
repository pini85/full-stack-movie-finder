{"ast":null,"code":"const xmlrpc = require('xmlrpc');\n\nconst URIjs = require('urijs');\n\nconst pjson = require('../package.json');\n\nconst url = 'http://api.opensubtitles.org:80/xml-rpc';\nconst url_ssl = 'https://api.opensubtitles.org:443/xml-rpc';\nmodule.exports = class OS {\n  constructor(endpoint, ssl) {\n    const UA = pjson.name + ' v' + pjson.version;\n    const uri = endpoint || (ssl ? url_ssl : url);\n\n    const req = URIjs(uri)._parts;\n\n    const secure = req.protocol === 'https';\n    const opts = {\n      host: req.hostname,\n      port: req.port || (secure ? 443 : 80),\n      path: req.path,\n      headers: {\n        'User-Agent': UA\n      }\n    };\n    this.client = secure ? xmlrpc.createSecureClient(opts) : xmlrpc.createClient(opts);\n  }\n\n  handleError(error) {\n    error.message && error.message.match('XML-RPC tag \\'TITLE\\'') && (error.message = 'API seems offline');\n    return error;\n  }\n\n  call(method, args) {\n    return new Promise((resolve, reject) => {\n      this.client.methodCall(method, [...args], (err, data) => {\n        if (err) return reject(this.handleError(err));\n        resolve(data);\n      });\n    });\n  }\n\n  LogIn(username, password, language, useragent) {\n    return this.call('LogIn', arguments);\n  }\n\n  LogOut(token) {\n    return this.call('LogOut', arguments);\n  }\n\n  SearchSubtitles(token, array_queries) {\n    return this.call('SearchSubtitles', arguments);\n  }\n\n  SearchToMail(token, array_langs, array_movies) {\n    return this.call('SearchToMail', arguments);\n  }\n\n  CheckSubHash(token, array_subs_hash) {\n    return this.call('CheckSubHash', arguments);\n  }\n\n  CheckMovieHash(token, array_movies_hash) {\n    return this.call('CheckMovieHash', arguments);\n  }\n\n  CheckMovieHash2(token, array_movies_hash) {\n    return this.call('CheckMovieHash2', arguments);\n  }\n\n  InsertMovieHash(token, array_movies_info) {\n    return this.call('InsertMovieHash', arguments);\n  }\n\n  TryUploadSubtitles(token, array_sub) {\n    return this.call('TryUploadSubtitles', arguments);\n  }\n\n  UploadSubtitles(token, array_sub) {\n    return this.call('UploadSubtitles', arguments);\n  }\n\n  DetectLanguage(token, array_texts) {\n    return this.call('DetectLanguage', arguments);\n  }\n\n  DownloadSubtitles(token, array_subid) {\n    return this.call('DownloadSubtitles', arguments);\n  }\n\n  ReportWrongMovieHash(token, IDSubMovieFile) {\n    return this.call('ReportWrongMovieHash', arguments);\n  }\n\n  ReportWrongImdbMovie(token, array_movie) {\n    return this.call('ReportWrongImdbMovie', arguments);\n  }\n\n  GetSubLanguages(language) {\n    return this.call('GetSubLanguages', arguments);\n  }\n\n  GetAvailableTranslations(token, program) {\n    return this.call('GetAvailableTranslations', arguments);\n  }\n\n  GetTranslation(token, iso639, format, program) {\n    return this.call('GetTranslation', arguments);\n  }\n\n  GetUserInfo(token) {\n    return this.call('GetUserInfo', arguments);\n  }\n\n  SearchMoviesOnIMDB(token, query) {\n    return this.call('SearchMoviesOnIMDB', arguments);\n  }\n\n  GuessMovieFromString(token, array_titles) {\n    // Beta - might break or stop working\n    return this.call('GuessMovieFromString', arguments);\n  }\n\n  GetIMDBMovieDetails(token, imdbid) {\n    return this.call('GetIMDBMovieDetails', arguments);\n  }\n\n  InsertMovie(token, array_movie) {\n    return this.call('InsertMovie', arguments);\n  }\n\n  SubtitlesVote(token, array_vote) {\n    return this.call('SubtitlesVote', arguments);\n  }\n\n  GetComments(token, array_subids) {\n    return this.call('GetComments', arguments);\n  }\n\n  AddComment(token, array_comments) {\n    return this.call('AddComment', arguments);\n  }\n\n  AddRequest(token, array_request) {\n    return this.call('AddRequest', arguments);\n  }\n\n  SetSubscribeUrl(token, url) {\n    return this.call('SetSubscribeUrl', arguments);\n  }\n\n  SubscribeToHash(token, array_hashs) {\n    return this.call('SubscribeToHash', arguments);\n  }\n\n  AutoUpdate(program_name) {\n    return this.call('AutoUpdate', arguments);\n  }\n\n  SuggestMovie(token, querystring) {\n    return this.call('SuggestMovie', arguments);\n  }\n\n  QuickSuggest(token, str, sublanguageid) {\n    return this.call('QuickSuggest', arguments);\n  }\n\n  NoOperation(token) {\n    return this.call('NoOperation', arguments);\n  }\n\n  ServerInfo() {\n    return this.call('ServerInfo', []);\n  }\n\n};","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/node_modules/opensubtitles-api/lib/opensubtitles.js"],"names":["xmlrpc","require","URIjs","pjson","url","url_ssl","module","exports","OS","constructor","endpoint","ssl","UA","name","version","uri","req","_parts","secure","protocol","opts","host","hostname","port","path","headers","client","createSecureClient","createClient","handleError","error","message","match","call","method","args","Promise","resolve","reject","methodCall","err","data","LogIn","username","password","language","useragent","arguments","LogOut","token","SearchSubtitles","array_queries","SearchToMail","array_langs","array_movies","CheckSubHash","array_subs_hash","CheckMovieHash","array_movies_hash","CheckMovieHash2","InsertMovieHash","array_movies_info","TryUploadSubtitles","array_sub","UploadSubtitles","DetectLanguage","array_texts","DownloadSubtitles","array_subid","ReportWrongMovieHash","IDSubMovieFile","ReportWrongImdbMovie","array_movie","GetSubLanguages","GetAvailableTranslations","program","GetTranslation","iso639","format","GetUserInfo","SearchMoviesOnIMDB","query","GuessMovieFromString","array_titles","GetIMDBMovieDetails","imdbid","InsertMovie","SubtitlesVote","array_vote","GetComments","array_subids","AddComment","array_comments","AddRequest","array_request","SetSubscribeUrl","SubscribeToHash","array_hashs","AutoUpdate","program_name","SuggestMovie","querystring","QuickSuggest","str","sublanguageid","NoOperation","ServerInfo"],"mappings":"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","sourcesContent":["const xmlrpc = require('xmlrpc')\r\nconst URIjs = require('urijs')\r\n\r\nconst pjson = require('../package.json')\r\nconst url = 'http://api.opensubtitles.org:80/xml-rpc'\r\nconst url_ssl = 'https://api.opensubtitles.org:443/xml-rpc'\r\n\r\nmodule.exports = class OS {\r\n    constructor(endpoint, ssl) {\r\n        const UA = pjson.name + ' v' + pjson.version\r\n        const uri = endpoint || (ssl ? url_ssl : url)\r\n        const req = URIjs(uri)._parts\r\n        const secure = req.protocol === 'https'\r\n\r\n        const opts = {\r\n            host: req.hostname,\r\n            port: req.port || (secure ? 443 : 80),\r\n            path: req.path,\r\n            headers: {\r\n                'User-Agent': UA\r\n            }\r\n        }\r\n\r\n        this.client = secure ? xmlrpc.createSecureClient(opts) : xmlrpc.createClient(opts)\r\n    }\r\n\r\n    handleError(error) {\r\n        error.message && error.message.match('XML-RPC tag \\'TITLE\\'') && (error.message = 'API seems offline')\r\n        return error\r\n    }\r\n\r\n    call(method, args) {\r\n        return new Promise((resolve, reject) => {\r\n            this.client.methodCall(method, [...args], (err, data) => {\r\n                if (err) return reject(this.handleError(err))\r\n                resolve(data)\r\n            })\r\n        })\r\n    }\r\n\r\n    LogIn(username, password, language, useragent) {\r\n        return this.call('LogIn', arguments)\r\n    }\r\n    LogOut(token) {\r\n        return this.call('LogOut', arguments)\r\n    }\r\n    SearchSubtitles(token, array_queries) {\r\n        return this.call('SearchSubtitles', arguments)\r\n    }\r\n    SearchToMail(token, array_langs, array_movies) {\r\n        return this.call('SearchToMail', arguments)\r\n    }\r\n    CheckSubHash(token, array_subs_hash) {\r\n        return this.call('CheckSubHash', arguments)\r\n    }\r\n    CheckMovieHash(token, array_movies_hash) {\r\n        return this.call('CheckMovieHash', arguments)\r\n    }\r\n    CheckMovieHash2(token, array_movies_hash) {\r\n        return this.call('CheckMovieHash2', arguments)\r\n    }\r\n    InsertMovieHash(token, array_movies_info) {\r\n        return this.call('InsertMovieHash', arguments)\r\n    }\r\n    TryUploadSubtitles(token, array_sub) {\r\n        return this.call('TryUploadSubtitles', arguments)\r\n    }\r\n    UploadSubtitles(token, array_sub) {\r\n        return this.call('UploadSubtitles', arguments)\r\n    }\r\n    DetectLanguage(token, array_texts) {\r\n        return this.call('DetectLanguage', arguments)\r\n    }\r\n    DownloadSubtitles(token, array_subid) {\r\n        return this.call('DownloadSubtitles', arguments)\r\n    }\r\n    ReportWrongMovieHash(token, IDSubMovieFile) {\r\n        return this.call('ReportWrongMovieHash', arguments)\r\n    }\r\n    ReportWrongImdbMovie(token, array_movie) {\r\n        return this.call('ReportWrongImdbMovie', arguments)\r\n    }\r\n    GetSubLanguages(language) {\r\n        return this.call('GetSubLanguages', arguments)\r\n    }\r\n    GetAvailableTranslations(token, program) {\r\n        return this.call('GetAvailableTranslations', arguments)\r\n    }\r\n    GetTranslation(token, iso639, format, program) {\r\n        return this.call('GetTranslation', arguments)\r\n    }\r\n    GetUserInfo(token) {\r\n        return this.call('GetUserInfo', arguments)\r\n    }\r\n    SearchMoviesOnIMDB(token, query) {\r\n        return this.call('SearchMoviesOnIMDB', arguments)\r\n    }\r\n    GuessMovieFromString(token, array_titles) {\r\n        // Beta - might break or stop working\r\n        return this.call('GuessMovieFromString', arguments)\r\n    }\r\n    GetIMDBMovieDetails(token, imdbid) {\r\n        return this.call('GetIMDBMovieDetails', arguments)\r\n    }\r\n    InsertMovie(token, array_movie) {\r\n        return this.call('InsertMovie', arguments)\r\n    }\r\n    SubtitlesVote(token, array_vote) {\r\n        return this.call('SubtitlesVote', arguments)\r\n    }\r\n    GetComments(token, array_subids) {\r\n        return this.call('GetComments', arguments)\r\n    }\r\n    AddComment(token, array_comments) {\r\n        return this.call('AddComment', arguments)\r\n    }\r\n    AddRequest(token, array_request) {\r\n        return this.call('AddRequest', arguments)\r\n    }\r\n    SetSubscribeUrl(token, url) {\r\n        return this.call('SetSubscribeUrl', arguments)\r\n    }\r\n    SubscribeToHash(token, array_hashs) {\r\n        return this.call('SubscribeToHash', arguments)\r\n    }\r\n    AutoUpdate(program_name) {\r\n        return this.call('AutoUpdate', arguments)\r\n    }\r\n    SuggestMovie(token, querystring) {\r\n        return this.call('SuggestMovie', arguments)\r\n    }\r\n    QuickSuggest(token, str, sublanguageid) {\r\n        return this.call('QuickSuggest', arguments)\r\n    }\r\n    NoOperation(token) {\r\n        return this.call('NoOperation', arguments)\r\n    }\r\n    ServerInfo() {\r\n        return this.call('ServerInfo', [])\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}