{"ast":null,"code":"const libhash = require('./hash.js');\n\nconst path = require('path');\n\nmodule.exports = new class LibUpload {\n  // Create a valid object from passed info for TryUploadSubtitles\n  createTryData(input) {\n    const checkMovie = (obj = Object()) => {\n      if (!input.path) return Promise.resolve(obj);\n      return libhash.computeHash(input.path).then(response => {\n        obj = response; // moviebytesize + moviehash\n\n        obj.moviefilename = path.basename(input.path);\n        return obj;\n      });\n    };\n\n    const checkSub = (obj = Object()) => {\n      if (!input.subpath) return Promise.reject('Missing subpath parameter (path to subtitle file)');\n      return libhash.computeMD5(input.subpath).then(md5 => {\n        obj.subhash = md5;\n        obj.subfilename = path.basename(input.subpath);\n        return obj;\n      });\n    };\n\n    const injectInput = (obj = Object()) => {\n      if (input.imdbid) obj.idmovieimdb = input.imdbid.toString().replace('tt', '');\n      if (input.sublanguageid) obj.sublanguageid = input.sublanguageid;\n      if (input.moviefps) obj.moviefps = input.moviefps.toString();\n      if (input.movieframes) obj.movieframes = input.movieframes.toString();\n      if (input.movietimems) obj.movietimems = input.movietimems.toString();\n      if (input.subauthorcomment) obj.subauthorcomment = input.subauthorcomment;\n      if (input.subtranslator) obj.subtranslator = input.subtranslator;\n      if (input.moviereleasename) obj.moviereleasename = input.moviereleasename;\n      if (input.movieaka) obj.movieaka = input.movieaka;\n      if (input.hearingimpaired) obj.hearingimpaired = isNaN(parseInt(input.hearingimpaired)) ? input.hearingimpaired ? '1' : '0' : input.hearingimpaired.toString();\n      if (input.highdefinition) obj.highdefinition = isNaN(parseInt(input.highdefinition)) ? input.highdefinition ? '1' : '0' : input.highdefinition.toString();\n      if (input.automatictranslation) obj.automatictranslation = isNaN(parseInt(input.automatictranslation)) ? input.automatictranslation ? '1' : '0' : input.automatictranslation.toString();\n      if (input.foreignpartsonly) obj.foreignpartsonly = isNaN(parseInt(input.foreignpartsonly)) ? input.foreignpartsonly ? '1' : '0' : input.foreignpartsonly.toString();\n      return obj;\n    }; // mandatory: subhash (md5 of subtitles), subfilename, moviehash, moviebytesize, moviefilename\n\n\n    return checkMovie().then(checkSub).then(injectInput).then(data => ({\n      cd1: data\n    }));\n  } // Create a valid object for Upload\n\n\n  arrangeUploadData(input) {\n    let baseinfo = Object();\n    if (input.idmovieimdb) baseinfo.idmovieimdb = input.idmovieimdb.toString();\n    if (input.moviereleasename) baseinfo.moviereleasename = input.moviereleasename.toString();\n    if (input.movieaka) baseinfo.movieaka = input.movieaka.toString();\n    if (input.sublanguageid) baseinfo.sublanguageid = input.sublanguageid.toString();\n    if (input.subauthorcomment) baseinfo.subauthorcomment = input.subauthorcomment.toString();\n    if (input.hearingimpaired) baseinfo.hearingimpaired = input.hearingimpaired.toString();\n    if (input.highdefinition) baseinfo.highdefinition = input.highdefinition.toString();\n    if (input.automatictranslation) baseinfo.automatictranslation = input.automatictranslation.toString();\n    if (input.subtranslator) baseinfo.subtranslator = input.subtranslator.toString();\n    if (input.foreignpartsonly) baseinfo.foreignpartsonly = input.foreignpartsonly.toString();\n    let cd1 = {\n      subhash: input.subhash,\n      subfilename: input.subfilename,\n      subcontent: input.subcontent\n    };\n    if (input.moviebytesize) cd1.moviebytesize = input.moviebytesize.toString();\n    if (input.moviehash) cd1.moviehash = input.moviehash;\n    if (input.moviefilename) cd1.moviefilename = input.moviefilename;\n    if (input.moviefps) cd1.moviefps = input.moviefps;\n    if (input.movieframes) cd1.movieframes = input.movieframes.toString();\n    if (input.movietimems) cd1.movietimems = input.movietimems.toString();\n    return {\n      baseinfo: baseinfo,\n      cd1: cd1\n    };\n  } // Read subfile content\n\n\n  createContent(input) {\n    return libhash.computeSubContent(input.subpath).then(base64 => {\n      delete input.subpath;\n      input.subcontent = base64;\n      return input;\n    });\n  } // Analyze TryUploadSubtitles response and behave in function\n\n\n  parseResponse(response, input) {\n    if (response.data && response.data[0]) {\n      // response\n      if (response.data[0].IDMovieImdb) {\n        // response & response.imdb\n        input.idmovieimdb = response.data[0].IDMovieImdb;\n        return input;\n      } else {\n        // response & no reponse.imdb\n        if (input.idmovieimdb) {\n          // response & no response.imdb but input.imdb\n          return input;\n        } else {\n          // response & no response.imdb & no input.imdb\n          throw Error('Matching IMDB ID cannot be found');\n        }\n      }\n    } else {\n      // no response\n      if (input.idmovieimdb) {\n        // no response but input.imdb\n        return input;\n      } else {\n        // no response & no input.imdb\n        throw Error('Matching IMDB ID cannot be found');\n      }\n    }\n  }\n\n}();","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/node_modules/opensubtitles-api/lib/upload.js"],"names":["libhash","require","path","module","exports","LibUpload","createTryData","input","checkMovie","obj","Object","Promise","resolve","computeHash","then","response","moviefilename","basename","checkSub","subpath","reject","computeMD5","md5","subhash","subfilename","injectInput","imdbid","idmovieimdb","toString","replace","sublanguageid","moviefps","movieframes","movietimems","subauthorcomment","subtranslator","moviereleasename","movieaka","hearingimpaired","isNaN","parseInt","highdefinition","automatictranslation","foreignpartsonly","data","cd1","arrangeUploadData","baseinfo","subcontent","moviebytesize","moviehash","createContent","computeSubContent","base64","parseResponse","IDMovieImdb","Error"],"mappings":"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","sourcesContent":["const libhash = require('./hash.js')\r\nconst path = require('path')\r\n\r\nmodule.exports = new class LibUpload {\r\n\r\n    // Create a valid object from passed info for TryUploadSubtitles\r\n    createTryData(input) {\r\n\r\n        const checkMovie = (obj = Object()) => {\r\n            if (!input.path) return Promise.resolve(obj)\r\n\r\n            return libhash.computeHash(input.path).then(response => {\r\n                obj = response // moviebytesize + moviehash\r\n                obj.moviefilename = path.basename(input.path)\r\n                return obj\r\n            })\r\n        }\r\n\r\n        const checkSub = (obj = Object()) => {\r\n            if (!input.subpath) return Promise.reject('Missing subpath parameter (path to subtitle file)')\r\n\r\n            return libhash.computeMD5(input.subpath).then(md5 => {\r\n                obj.subhash = md5\r\n                obj.subfilename = path.basename(input.subpath)\r\n                return obj\r\n            })\r\n        }\r\n\r\n        const injectInput = (obj = Object()) => {\r\n            if (input.imdbid) obj.idmovieimdb = input.imdbid.toString().replace('tt', '')\r\n            if (input.sublanguageid) obj.sublanguageid = input.sublanguageid\r\n            if (input.moviefps) obj.moviefps = input.moviefps.toString()\r\n            if (input.movieframes) obj.movieframes = input.movieframes.toString()\r\n            if (input.movietimems) obj.movietimems = input.movietimems.toString()\r\n            if (input.subauthorcomment) obj.subauthorcomment = input.subauthorcomment\r\n            if (input.subtranslator) obj.subtranslator = input.subtranslator\r\n            if (input.moviereleasename) obj.moviereleasename = input.moviereleasename\r\n            if (input.movieaka) obj.movieaka = input.movieaka\r\n            if (input.hearingimpaired) obj.hearingimpaired = isNaN(parseInt(input.hearingimpaired)) ? input.hearingimpaired ? '1' : '0' : input.hearingimpaired.toString()\r\n            if (input.highdefinition) obj.highdefinition = isNaN(parseInt(input.highdefinition)) ? input.highdefinition ? '1' : '0' : input.highdefinition.toString()\r\n            if (input.automatictranslation) obj.automatictranslation = isNaN(parseInt(input.automatictranslation)) ? input.automatictranslation ? '1' : '0' : input.automatictranslation.toString()\r\n            if (input.foreignpartsonly) obj.foreignpartsonly = isNaN(parseInt(input.foreignpartsonly)) ? input.foreignpartsonly ? '1' : '0' : input.foreignpartsonly.toString()\r\n\r\n            return obj\r\n        }\r\n\r\n        // mandatory: subhash (md5 of subtitles), subfilename, moviehash, moviebytesize, moviefilename\r\n        return checkMovie()\r\n            .then(checkSub)\r\n            .then(injectInput)\r\n            .then(data => ({cd1: data}))\r\n    }\r\n\r\n    // Create a valid object for Upload\r\n    arrangeUploadData(input) {\r\n        let baseinfo = Object()\r\n\r\n        if (input.idmovieimdb) baseinfo.idmovieimdb = input.idmovieimdb.toString()\r\n        if (input.moviereleasename) baseinfo.moviereleasename = input.moviereleasename.toString()\r\n        if (input.movieaka) baseinfo.movieaka = input.movieaka.toString()\r\n        if (input.sublanguageid) baseinfo.sublanguageid = input.sublanguageid.toString()\r\n        if (input.subauthorcomment) baseinfo.subauthorcomment = input.subauthorcomment.toString()\r\n        if (input.hearingimpaired) baseinfo.hearingimpaired = input.hearingimpaired.toString()\r\n        if (input.highdefinition) baseinfo.highdefinition = input.highdefinition.toString()\r\n        if (input.automatictranslation) baseinfo.automatictranslation = input.automatictranslation.toString()\r\n        if (input.subtranslator) baseinfo.subtranslator = input.subtranslator.toString()\r\n        if (input.foreignpartsonly) baseinfo.foreignpartsonly = input.foreignpartsonly.toString()\r\n\r\n        let cd1 = {\r\n            subhash: input.subhash,\r\n            subfilename: input.subfilename,\r\n            subcontent: input.subcontent\r\n        }\r\n\r\n        if (input.moviebytesize) cd1.moviebytesize = input.moviebytesize.toString()\r\n        if (input.moviehash) cd1.moviehash = input.moviehash\r\n        if (input.moviefilename) cd1.moviefilename = input.moviefilename\r\n        if (input.moviefps) cd1.moviefps = input.moviefps\r\n        if (input.movieframes) cd1.movieframes = input.movieframes.toString()\r\n        if (input.movietimems) cd1.movietimems = input.movietimems.toString()\r\n\r\n        return {\r\n            baseinfo: baseinfo,\r\n            cd1: cd1\r\n        }\r\n    }\r\n\r\n    // Read subfile content\r\n    createContent(input) {\r\n        return libhash.computeSubContent(input.subpath).then(base64 => {\r\n            delete input.subpath\r\n            input.subcontent = base64\r\n            return input\r\n        })\r\n    }\r\n\r\n    // Analyze TryUploadSubtitles response and behave in function\r\n    parseResponse(response, input) {\r\n        if (response.data && response.data[0]) { // response\r\n            if (response.data[0].IDMovieImdb) { // response & response.imdb\r\n                input.idmovieimdb = response.data[0].IDMovieImdb\r\n                return input\r\n            } else { // response & no reponse.imdb\r\n                if (input.idmovieimdb) { // response & no response.imdb but input.imdb\r\n                    return input\r\n                } else { // response & no response.imdb & no input.imdb\r\n                    throw Error('Matching IMDB ID cannot be found')\r\n                }\r\n            }\r\n        } else { // no response\r\n            if (input.idmovieimdb) { // no response but input.imdb\r\n                return input\r\n            } else { // no response & no input.imdb\r\n                throw Error('Matching IMDB ID cannot be found')\r\n            }\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}