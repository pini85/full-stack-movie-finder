{"ast":null,"code":"var _jsxFileName = \"/home/pinchas/code/projects/movie-finder/src/components/Cast/Cast.component.jsx\";\nimport React, { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport useDidUpdateEffect from \"../../hooks/useDidUpdateEffect.hooks\";\nimport { fetchCastSuggestion } from \"../../redux/actions/index\";\nimport CastSuggestion from \"../CastSuggestion/CastSuggestion.component\";\nimport CastOptions from \"../CastOptions/CastOptions.component\";\nimport Input from \"../Input/Input.component\";\nimport Button from \"../Button/Button\";\nimport { Container, CastSuggestionsContainer } from \"./Cast.styles\";\n\nconst Cast = ({\n  type,\n  placeholder,\n  fetchCastSuggestion,\n  castSuggestions,\n  advancedSearchValue,\n  advancedSearchSetValue,\n  setCastArray,\n  setCastOption\n}) => {\n  const [isFocused, setFocused] = useState(false);\n  const [activateInput, setActivateInput] = useState(false);\n  const inputRef = useRef(null);\n  useDidUpdateEffect(() => {\n    setTimeout(() => {\n      fetchCastSuggestion(type, advancedSearchValue);\n    }, 150);\n  }, [advancedSearchValue]);\n\n  const handleOnChange = e => {\n    advancedSearchSetValue(e.target.value);\n  };\n\n  const handleFocus = () => {\n    setFocused(true);\n  };\n\n  const handleBlur = e => {\n    setTimeout(() => {\n      setFocused(false);\n    }, 100);\n  };\n\n  const handleSubmit = async () => {\n    setCastArray(value => [...value, advancedSearchValue]);\n    advancedSearchSetValue(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, !activateInput && /*#__PURE__*/React.createElement(CastOptions, {\n    name: placeholder,\n    setActivateInput: setActivateInput,\n    setCastOption: setCastOption,\n    inputRef: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(AnimatePresence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, activateInput && /*#__PURE__*/React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 1\n    },\n    transition: {\n      duration: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    inputRef: inputRef,\n    focus: handleFocus,\n    blur: handleBlur,\n    handleOnChange: handleOnChange,\n    value: advancedSearchValue,\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleSubmit,\n    padding: \"0.5rem 1rem\",\n    title: \"+\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CastSuggestionsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, isFocused && advancedSearchValue.length > 0 && castSuggestions && castSuggestions.slice(0, 6).map(cast => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: cast.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CastSuggestion, {\n      name: cast.name,\n      advancedSearchValue: advancedSearchValue,\n      advancedSearchSetValue: advancedSearchSetValue,\n      focus: handleFocus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }));\n  })));\n};\n\nconst mapStateToProps = state => ({\n  castSuggestions: state.castSuggestions\n});\n\nexport default connect(mapStateToProps, {\n  fetchCastSuggestion: fetchCastSuggestion\n})(Cast);","map":{"version":3,"sources":["/home/pinchas/code/projects/movie-finder/src/components/Cast/Cast.component.jsx"],"names":["React","useState","useRef","connect","motion","AnimatePresence","useDidUpdateEffect","fetchCastSuggestion","CastSuggestion","CastOptions","Input","Button","Container","CastSuggestionsContainer","Cast","type","placeholder","castSuggestions","advancedSearchValue","advancedSearchSetValue","setCastArray","setCastOption","isFocused","setFocused","activateInput","setActivateInput","inputRef","setTimeout","handleOnChange","e","target","value","handleFocus","handleBlur","handleSubmit","opacity","duration","length","slice","map","cast","id","name","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport useDidUpdateEffect from \"../../hooks/useDidUpdateEffect.hooks\";\nimport { fetchCastSuggestion } from \"../../redux/actions/index\";\nimport CastSuggestion from \"../CastSuggestion/CastSuggestion.component\";\nimport CastOptions from \"../CastOptions/CastOptions.component\";\nimport Input from \"../Input/Input.component\";\nimport Button from \"../Button/Button\";\nimport { Container, CastSuggestionsContainer } from \"./Cast.styles\";\n\nconst Cast = ({\n  type,\n  placeholder,\n  fetchCastSuggestion,\n  castSuggestions,\n  advancedSearchValue,\n  advancedSearchSetValue,\n  setCastArray,\n  setCastOption,\n}) => {\n  const [isFocused, setFocused] = useState(false);\n  const [activateInput, setActivateInput] = useState(false);\n  const inputRef = useRef(null);\n\n  useDidUpdateEffect(() => {\n    setTimeout(() => {\n      fetchCastSuggestion(type, advancedSearchValue);\n    }, 150);\n  }, [advancedSearchValue]);\n\n  const handleOnChange = (e) => {\n    advancedSearchSetValue(e.target.value);\n  };\n\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = (e) => {\n    setTimeout(() => {\n      setFocused(false);\n    }, 100);\n  };\n\n  const handleSubmit = async () => {\n    setCastArray((value) => [...value, advancedSearchValue]);\n    advancedSearchSetValue(\"\");\n  };\n\n  return (\n    <Container>\n      {!activateInput && (\n        <CastOptions\n          name={placeholder}\n          setActivateInput={setActivateInput}\n          setCastOption={setCastOption}\n          inputRef={inputRef}\n        />\n      )}\n      <AnimatePresence>\n        {activateInput && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 1 }}\n            transition={{ duration: 1 }}\n          >\n            <Input\n              inputRef={inputRef}\n              focus={handleFocus}\n              blur={handleBlur}\n              handleOnChange={handleOnChange}\n              value={advancedSearchValue}\n              placeholder={placeholder}\n            ></Input>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <Button\n        handleClick={handleSubmit}\n        padding=\"0.5rem 1rem\"\n        title=\"&#43;\"\n      ></Button>\n      <CastSuggestionsContainer>\n        {isFocused &&\n          advancedSearchValue.length > 0 &&\n          castSuggestions &&\n          castSuggestions.slice(0, 6).map((cast) => {\n            return (\n              <div key={cast.id}>\n                {\n                  <CastSuggestion\n                    name={cast.name}\n                    advancedSearchValue={advancedSearchValue}\n                    advancedSearchSetValue={advancedSearchSetValue}\n                    focus={handleFocus}\n                  />\n                }\n              </div>\n            );\n          })}\n      </CastSuggestionsContainer>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  castSuggestions: state.castSuggestions,\n});\n\nexport default connect(mapStateToProps, {\n  fetchCastSuggestion: fetchCastSuggestion,\n})(Cast);\n"]},"metadata":{},"sourceType":"module"}